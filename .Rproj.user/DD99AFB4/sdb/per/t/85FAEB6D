{
    "collab_server" : "",
    "contents" : "#load bed files\nload_bed<-function(bedfile)\n{\n\n  #Reading all file and selecting the useful columns\n  uniques<-read.table(file=bedfile, fill=TRUE, stringsAsFactors=FALSE,skip=1)\n  uniques<-uniques[,c(1,2,3,4)]\n\n\n  #Ordering and naming\n  colnames(uniques)<-c(\"chr\",\"start\",\"end\",\"name\")\n  uniques<-na.omit(uniques)\n  ordereduniques<-uniques[with(uniques, order(chr,as.numeric(start))), ]\n  if (dim(ordereduniques)[1]==0){\n    stop('No data loaded! \\n\\n')\n  }\n  else{\n    return(ordereduniques)\n  }\n}\n\n\n\nchoose_chr_bed<-function(m_bed,chrom_list=\"chr2L\")\n{\n\n  sec=NULL\n  for (j in 1:length(chrom_list)){\n    sec=rbind(sec,m_bed[m_bed$chr==chrom_list[j],])\n  }\n  return(sec)\n}\n\n\n#merge bed files to bin\ncheck_bed_bin<-function(m_bed,bin=2000)\n{\n  ooo=matrix(data=0, nrow = dim(m_bed)[1], ncol = 4)\n  for (i in 1:dim(m_bed)[1])\n  {\n\n    st=(ceiling(m_bed[i,2]/bin))\n    ed=(ceiling(m_bed[i,3]/bin))\n    st1=(ceiling((m_bed[i,2]-500)/bin))\n    ed1=(ceiling((m_bed[i,3]+500)/bin))\n\n    if(st!=ed)\n    {\n      ooo[i,2]=st\n      ooo[i,3]=ed\n      if(st1!=st)\n      {\n        ooo[i,1]=st1\n      }\n      if(ed1!=ed)\n      {\n        ooo[i,4]=ed1\n      }\n    }\n    else\n    {\n      ooo[i,2]=st\n\n      if(st1!=st)\n      {\n        ooo[i,1]=st1\n      }\n      if(ed1!=ed)\n      {\n        ooo[i,4]=ed1\n      }\n    }\n\n  }\n  return(ooo)\n}\n\n\nconvert_bed_to_matrix<-function(bedfile,bin=2000,chrom_list=\"chr2L\",tot_size=0,bed_window=2000){\n\n\n  #Get only some chromosome\n  if(tot_size==0)\n  {\n  \tprint(\"please input tot_size\")\n  }\n  else\n  {\n  \tcmap=matrix(data=0, nrow = tot_size, ncol = 1)\n  \tsec=NULL\n\t  for (j in 1:length(chrom_list)){\n\t    sec=rbind(sec,bedfile[bedfile$chr==chrom_list[j],])\n\t  }\n\t  ordereduniques=sec\n\n\t   #Data insertion\n\t  count=0\n\t  for (i in 1:dim(ordereduniques)[1]){\n      st=(ceiling(ordereduniques[i,2]/bin))\n      ed=(ceiling(ordereduniques[i,3]/bin))\n      st1=(ceiling((ordereduniques[i,2]-bed_window)/bin))\n      ed1=(ceiling((ordereduniques[i,3]+bed_window)/bin))\n\n      if(st<1)\n      {\n      \tst=1\n      }\n      if(st1<1)\n      {\n      \tst1=1\n      }\n      if(ed<1)\n      {\n      \ted=1\n      }\n      if(ed1<1)\n      {\n      \ted1=1\n      }\n\n      if(st>tot_size)\n      {\n      \tst=tot_size\n      }\n      if(st1>tot_size)\n      {\n      \tst1=tot_size\n      }\n      if(ed>tot_size)\n      {\n      \ted=tot_size\n      }\n      if(ed1>tot_size)\n      {\n      \ted1=tot_size\n      }\n\n      if(st!=ed)\n      {\n        cmap[st,1]=cmap[st,1]+1\n        count=count+1\n        cmap[ed,1]=cmap[ed,1]+1\n        count=count+1\n        if(st1!=st)\n        {\n          cmap[st1,1]=cmap[st1,1]+1\n          count=count+1\n        }\n        if(ed1!=ed)\n        {\n          cmap[ed1,1]=cmap[ed1,1]+1\n          count=count+1\n        }\n      }\n      else\n      {\n        cmap[ed,1]=cmap[ed,1]+1\n        count=count+1\n        if(st1!=st)\n        {\n          cmap[st1,1]=cmap[st1,1]+1\n          count=count+1\n        }\n        if(ed1!=ed)\n        {\n          cmap[ed1,1]=cmap[ed1,1]+1\n          count=count+1\n        }\n      }\n    }\n\n\n  }\n\n  cat(sprintf(\"Mapped Fragments: %s\\n\",count))\n  return(cmap)\n}\n\n\n#output the interaction that our bed interact with ourbed\n\ncalculate_omiccircos_data<-function(cmap,bed_matrix,bed_bin,bedfile,chr=\"chr4\",st_cmap,m_threshold=0)\n{\n  n=dim(cmap)[1]\n  bed_count=0\n  nm_count=0\n  all_count=0\n  cccc=0;\n\n  ooo<-data.frame(\"chr_nm1\"=character(0),\"n_start1\"=numeric(0),\"bed_seq1\"=character(0),\"chr_nm2\"=character(0),\"n_start2\"=numeric(0),\"bed_seq2\"=character(0),\"read_count\"=numeric(0),stringsAsFactors=FALSE)\n\n  ooo=lapply(rbind(1:(dim(bed_matrix)[1]-1)), calculate_omiccircos_data_solo,cmap=cmap,bed_matrix=bed_matrix,bed_bin=bed_bin,bedfile=bedfile,chr=chr,st_cmap=st_cmap,m_threshold=m_threshold)\n  final_ooo<-data.frame(\"chr_nm1\"=character(0),\"n_start1\"=numeric(0),\"bed_seq1\"=character(0),\"chr_nm2\"=character(0),\"n_start2\"=numeric(0),\"bed_seq2\"=character(0),\"read_count\"=numeric(0),stringsAsFactors=FALSE)\n  for(tt in 1:(dim(bed_matrix)[1]-1))\n  {\n    if(!is.null(ooo[tt][[1]]))\n    {\n      final_ooo=rbind(final_ooo,as.data.frame(ooo[tt][[1]]))\n    }\n  }\n  colnames(final_ooo)=c(\"chr_nm1\",\"n_start1\",\"bed_seq1\",\"chr_nm2\",\"n_start2\",\"bed_seq2\",\"read_count\")\n  if(is.factor(final_ooo[,2]))\n  {\n    final_ooo[,2]=as.numeric(levels(final_ooo[,2])[final_ooo[,2]])\n    final_ooo[,5]=as.numeric(levels(final_ooo[,5])[final_ooo[,5]])\n    final_ooo[,7]=as.numeric(levels(final_ooo[,7])[final_ooo[,7]])\n  }else\n  {\n    final_ooo[,2]=as.numeric(final_ooo[,2])\n    final_ooo[,5]=as.numeric(final_ooo[,5])\n    final_ooo[,7]=as.numeric(final_ooo[,7])\n  }\n\n # final_ooo[,2]=as.numeric(levels(final_ooo[,2])[final_ooo[,2]])\n # final_ooo[,5]=as.numeric(levels(final_ooo[,5])[final_ooo[,5]])\n # final_ooo[,7]=as.numeric(levels(final_ooo[,7])[final_ooo[,7]])\n#\n # final_ooo[,1]=as.character(levels(final_ooo[,1])[final_ooo[,1]])\n # final_ooo[,3]=as.character(levels(final_ooo[,3])[final_ooo[,3]])\n # final_ooo[,4]=as.character(levels(final_ooo[,4])[final_ooo[,4]])\n # final_ooo[,6]=as.character(levels(final_ooo[,6])[final_ooo[,6]])\n\n  return (final_ooo)\n}\ncalculate_omiccircos_data_solo<-function(i,cmap,bed_matrix,bed_bin,bedfile,chr=\"chr4\",st_cmap,m_threshold=0)\n{\n  jj=which(cmap[i,(i+1):(dim(bed_matrix)[1])]>m_threshold)\n  jjj=jj+i\n  ooo=NULL\n  if(bed_matrix[i]!=0)\n  {\n    jjjj=which(bed_matrix[jjj]!=0)\n    jjjjj=jjj[jjjj]\n    j_length=length(jjjjj)\n    if(j_length>=1)\n    {\n      for(k in 1:4)\n      {\n        m_all=which(bed_bin[,k]==i)\n        m_all_length=length(m_all)\n        if(m_all_length>0)\n        {\n          for(mn in 1:m_all_length)\n          {\n            m=m_all[mn]\n            if(bedfile[m,1]==chr)\n            {\n              for(hh in 1:j_length)\n              {\n                mj=jjjjj[hh]\n                for(kk in 1:4)\n                {\n                  mm_all=which(bed_bin[,kk]==mj)\n                  mm_all_length=length(mm_all)\n                  if(mm_all_length>0)\n                  {\n                    for(mmn in 1:mm_all_length)\n                    {\n                      mm=mm_all[mmn]\n                      if(bedfile[mm,1]==chr)\n                      {\n                        ooo=rbind(ooo,cbind(bedfile[m,1],bedfile[m,2],bedfile[m,4],bedfile[mm,1],bedfile[mm,2],bedfile[mm,4],st_cmap[i,mj]))\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  tmp_ys=i%%100\n  if(tmp_ys==0)\n  {\n    print(paste(\"circos bin \",i,\" finish\",sep = \"\"))\n  }\n  return (ooo)\n}\n\n\n\n\nload_wig<-function(wigfile,resolution=2000,chrom=\"chr2L\",chrTotSize,chrstart,chrend)\n{\n\n\n  tmp_wig<-read.table(file=wigfile, fill=TRUE, stringsAsFactors=FALSE,skip=1)\n\n  ooo<-data.frame(\"seg.name\"=character(chrTotSize),\"seg.po\"=numeric(chrTotSize),\"value\"=numeric(chrTotSize),stringsAsFactors=FALSE)\n  ooo_num<-data.frame(\"wig_num\"=numeric(chrTotSize))\n  sec=NULL\n\n  sec=rbind(sec,tmp_wig[tmp_wig[,1]==chrom,])\n  sec[,2]=as.numeric(sec[,2])\n  sec[,3]=as.numeric(sec[,3])\n  sec[,4]=as.numeric(sec[,4])\n  if(chrend>0)\n  {\n    sec=sec[which(sec[,3]<chrend),]\n    sec[,2]=sec[,2]-chrstart\n    sec[,3]=sec[,3]-chrstart\n    sec=sec[which(sec[,2]>0),]\n  }\n\n\n\n  secdim=dim(sec)[1]\n  if(is.null(secdim))\n  {\n    return(NULL)\n  }\n  else if(secdim<2)\n  {\n    return(NULL)\n  }\n  else\n  {\n    ooo[,1]=chrom\n    ooo[,2:3]=0\n    ooo_num[,1]=0\n    wig_bin=1\n    sec_num=dim(sec)[1]\n\n\n    for(i in 1:sec_num)\n    {\n      wig_bin=ceiling((sec[i,2]+sec[i,3])/(2*resolution))\n      if(wig_bin>chrTotSize)\n      {\n        wig_bin=chrTotSize\n      }\n      ooo[wig_bin,3]=ooo[wig_bin,3]+sec[i,4]\n      ooo_num[wig_bin,1]=ooo_num[wig_bin,1]+1\n      ooo[wig_bin,2]=wig_bin\n    }\n    for(i in 1:chrTotSize)\n    {\n      if(ooo[i,2]==0)\n      {\n        ooo[i,2]=i\n      }\n      if(ooo_num[i,1]>0)\n      {\n        ooo[i,3]=(ooo[i,3])/(ooo_num[i,1])\n\n      }\n      else\n      {\n        ooo[i,3]=0\n      }\n    }\n    return (ooo)\n  }\n  #tmp_wig=sec\n\n}\n\n\n\n\nload_all_wig<-function(wigfile)\n{\n\n  #Reading all file and selecting the useful columns\n  uniques<-read.table(file=wigfile, fill=TRUE, stringsAsFactors=FALSE,skip=1)\n  uniques<-uniques[,c(1,2,3,4)]\n\n\n  #Ordering and naming\n  colnames(uniques)<-c(\"chr\",\"start\",\"end\",\"value\")\n  #unique[which(is.na(uniques[,4])),4]=0\n  #uniques<-na.omit(uniques)\n  #ordereduniques<-uniques[with(uniques, order(chr,as.numeric(start))), ]\n  if (dim(uniques)[1]==0){\n    stop('No data loaded! \\n\\n')\n  }\n  else{\n    return(uniques)\n  }\n}\n\n\nload_bed_wig<-function(wigfile,chrBed,chrom,chrstart,chrend,m_win)\n{\n  all_wig=load_all_wig(wigfile)\n  all_wig=all_wig[all_wig$chr==chrom,]\n  all_wig[,2]=as.numeric(all_wig[,2])\n  all_wig[,3]=as.numeric(all_wig[,3])\n  m_result=data.frame(\"chrom\"=character(0),\"start\"=numeric(0),\"end\"=numeric(0),\"wig_value\"=numeric(0),stringsAsFactors=FALSE)\n  dim_bed=dim(chrBed)[1]\n  m_result[1:dim_bed,1:3]=chrBed[,1:3]\n  if(chrend>0)\n  {\n    all_wig=all_wig[which(all_wig[,3]<chrend),]\n  }\n  if(chrstart>0)\n  {\n    all_wig[,2]=all_wig[,2]-chrstart\n    all_wig[,3]=all_wig[,3]-chrstart\n    all_wig=all_wig[which(all_wig[,2]>=0),]\n  }\n\n  for(i in 1:dim_bed)\n  {\n    tmp_bed_wig=which(all_wig[,2]>=chrBed[i,2]-m_win)\n    tmp_bed_wig=tmp_bed_wig[which(all_wig[tmp_bed_wig,3]<=chrBed[i,3]+m_win)]\n    m_result[i,4]=mean(as.numeric(all_wig[tmp_bed_wig,4]))\n  }\n  return(m_result)\n}\n\n\nfind_bed_to_bed_interaction<-function(cmap,bed_matrix,bed_bin,bedfile,chr=\"chr4\",st_cmap,m_threshold=0)\n{\n  n=dim(cmap)[1]\n  bed_count=0\n  nm_count=0\n  all_count=0\n  cccc=0;\n\n  ooo<-data.frame(\"bed_id1\"=numeric(0),\"chr_nm1\"=character(0),\"n_start1\"=numeric(0),\"n_end1\"=numeric(0),\"n_location1\"=numeric(0),\"bed_seq1\"=character(0),\"bed_id2\"=numeric(0),\"chr_nm2\"=character(0),\"n_start2\"=numeric(0),\"n_end2\"=numeric(0),\"n_location2\"=numeric(0),\"bed_seq2\"=character(0),\"read_count\"=numeric(0),\"bed_bin1\"=numeric(0),\"bed_bin2\"=numeric(0),stringsAsFactors=FALSE)\n\n  ooo=lapply(rbind(1:(dim(bed_matrix)[1]-1)), find_bed_to_bed_interaction_solo,cmap=cmap,bed_matrix=bed_matrix,bed_bin=bed_bin,bedfile=bedfile,chr=chr,st_cmap=st_cmap,m_threshold=m_threshold)\n  final_ooo<-data.frame(\"bed_id1\"=numeric(0),\"chr_nm1\"=character(0),\"n_start1\"=numeric(0),\"n_end1\"=numeric(0),\"n_location1\"=numeric(0),\"bed_seq1\"=character(0),\"bed_id2\"=numeric(0),\"chr_nm2\"=character(0),\"n_start2\"=numeric(0),\"n_end2\"=numeric(0),\"n_location2\"=numeric(0),\"bed_seq2\"=character(0),\"read_count\"=numeric(0),\"bed_bin1\"=numeric(0),\"bed_bin2\"=numeric(0),stringsAsFactors=FALSE)\n  for(tt in 1:(dim(bed_matrix)[1]-1))\n  {\n    if(!is.null(ooo[tt][[1]]))\n    {\n      final_ooo=rbind(final_ooo,as.data.frame(ooo[tt][[1]]))\n    }\n  }\n  colnames(final_ooo)=c(\"bed_id1\",\"chr_nm1\",\"n_start1\",\"n_end1\",\"n_location1\",\"bed_seq1\",\"bed_id2\",\"chr_nm2\",\"n_start2\",\"n_end2\",\"n_location2\",\"bed_seq2\",\"read_count\",\"bed_bin1\",\"bed_bin2\")\n  if(is.factor(final_ooo[,3]))\n  {\n    final_ooo[,1]=as.numeric(levels(final_ooo[,1])[final_ooo[,1]])\n    final_ooo[,3]=as.numeric(levels(final_ooo[,3])[final_ooo[,3]])\n    final_ooo[,4]=as.numeric(levels(final_ooo[,4])[final_ooo[,4]])\n    final_ooo[,5]=as.numeric(levels(final_ooo[,5])[final_ooo[,5]])\n    final_ooo[,7]=as.numeric(levels(final_ooo[,7])[final_ooo[,7]])\n    final_ooo[,10]=as.numeric(levels(final_ooo[,10])[final_ooo[,10]])\n    final_ooo[,9]=as.numeric(levels(final_ooo[,9])[final_ooo[,9]])\n    final_ooo[,11]=as.numeric(levels(final_ooo[,11])[final_ooo[,11]])\n    final_ooo[,13]=as.numeric(levels(final_ooo[,13])[final_ooo[,13]])\n    final_ooo[,14]=as.numeric(levels(final_ooo[,14])[final_ooo[,14]])\n    final_ooo[,15]=as.numeric(levels(final_ooo[,15])[final_ooo[,15]])\n    final_ooo[,2]=as.character(levels(final_ooo[,2])[final_ooo[,2]])\n    final_ooo[,5]=as.character(levels(final_ooo[,5])[final_ooo[,5]])\n    final_ooo[,6]=as.character(levels(final_ooo[,6])[final_ooo[,6]])\n    final_ooo[,8]=as.character(levels(final_ooo[,8])[final_ooo[,8]])\n    final_ooo[,12]=as.character(levels(final_ooo[,12])[final_ooo[,12]])\n  }else\n  {\n    final_ooo[,3]=as.numeric(final_ooo[,3])\n    final_ooo[,4]=as.numeric(final_ooo[,4])\n    final_ooo[,9]=as.numeric(final_ooo[,9])\n    final_ooo[,10]=as.numeric(final_ooo[,10])\n\n    final_ooo[,13]=as.numeric(final_ooo[,13])\n    final_ooo[,14]=as.numeric(final_ooo[,14])\n\n    final_ooo[,15]=as.numeric(final_ooo[,15])\n\n\n  }\n\n\n\n\n  return (final_ooo)\n}\nfind_bed_to_bed_interaction_solo<-function(i,cmap,bed_matrix,bed_bin,bedfile,chr=\"chr4\",st_cmap,m_threshold=0)\n{\n  jj=which(cmap[i,(i+1):(dim(bed_matrix)[1])]>m_threshold)\n  jjj=jj+i\n  ooo=NULL\n  if(bed_matrix[i]!=0)\n  {\n    jjjj=which(bed_matrix[jjj]!=0)\n    jjjjj=jjj[jjjj]\n    j_length=length(jjjjj)\n    if(j_length>=1)\n    {\n      for(k in 1:4)\n      {\n        m_all=which(bed_bin[,k]==i)\n        m_all_length=length(m_all)\n        if(m_all_length>0)\n        {\n          for(mn in 1:m_all_length)\n          {\n            m=m_all[mn]\n            if(bedfile[m,1]==chr)\n            {\n              for(hh in 1:j_length)\n              {\n                mj=jjjjj[hh]\n                for(kk in 1:4)\n                {\n                  mm_all=which(bed_bin[,kk]==mj)\n                  mm_all_length=length(mm_all)\n                  if(mm_all_length>0)\n                  {\n                    for(mmn in 1:mm_all_length)\n                    {\n                      mm=mm_all[mmn]\n                      if(bedfile[mm,1]==chr)\n                      {\n                        ooo=rbind(ooo,cbind(m,bedfile[m,1],bedfile[m,2],bedfile[m,3],k,bedfile[m,4],mm,bedfile[mm,1],bedfile[mm,2],bedfile[mm,3],kk,bedfile[mm,4],st_cmap[i,mj],i,mj))\n\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return (ooo)\n}\n\n\nwhitered<-function (n)\n{\n  colorpanel(n, \"white\", \"red\")\n}\n",
    "created" : 1466752074535.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "583363611",
    "id" : "85FAEB6D",
    "lastKnownWriteTime" : 1468566638,
    "last_content_update" : 1468566638018,
    "path" : "G:/R/HBP_package/new/HBP/R/calbed.R",
    "project_path" : "R/calbed.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}