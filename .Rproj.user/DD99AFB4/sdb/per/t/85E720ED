{
    "collab_server" : "",
    "contents" : "generate_enzyme_file<-function(enzyme=\"HindIII\",enzymesite=\"AAGCTT\",chrom_file=\"chrom_hg19.sizes\",enzymedir=\"annotation\",enzymeoverhangs5=1,genomeName=\"hg19\",resolution=100)\n{\n  chrom_info=read.table(chrom_file,fill=TRUE, stringsAsFactors=FALSE)\n  #all_genomedb=read.csv(\"all_genome_db.csv\",header=FALSE)\n  enzymesitesfile=paste(enzyme,\"_resfrag_\",genomeName,\".bed\",sep=\"\")\n  enzyme_dir=list.files(path=enzymedir,full.names=F,pattern=enzymesitesfile)\n  if(length(enzyme_dir)==0)\n  {\n    for(i in 1:length(all_genomedb))\n    {\n      dbfind=-1\n      dbrequire=FALSE\n      r_genomedb=NULL\n      dbfind=regexpr(genomeName,all_genomedb[1,i])\n      if(dbfind!=-1)\n      {\n        r_genomedb=as.character(all_genomedb[1,i])\n        dbrequire=require(all_genomedb[1,i],character.only = TRUE)\n        break\n      }\n    }\n    if(!is.null(r_genomedb))\n    {\n      if(dbrequire==FALSE)\n      {\n        print(paste(\"try to install the R package \",r_genomedb,sep=\"\"))\n        source(\"http://www.bioconductor.org/biocLite.R\")\n        biocLite(r_genomedb)\n      }else\n      {\n        all_chr <- chrom_info[,1]\n        resFrag <- getRestrictionFragmentsPerChromosome(resSite=enzymesite, chromosomes=all_chr, overhangs5=enzymeoverhangs5, genomePack=r_genomedb)\n        allRF <- do.call(\"c\",resFrag)\n        names(allRF) <- unlist(sapply(resFrag, function(x){paste0(\"HIC_\", seqlevels(x), \"_\", 1:length(x))}))\n        export(allRF, format=\"bed\", con=paste(enzymedir,\"/\",enzymesitesfile,sep=\"\"))\n      }\n    }else\n    {\n      print(paste(\"can not find the genome file\",sep=\"\"))\n    }\n  }else\n  {\n    print(paste(\"enzymesites file \",enzymesitesfile,\" is already existed, skip to generate it\"))\n  }\n}\n\nrun_hicpro<-function(hicpro_path=\"HiC-Pro\",inputfile=\"rawdata\",configfile=\"config-hicpro\",outdir=\"hg19\")\n{\n  hiccmd=paste(hicpro_path,\" -i \",inputfile,\" -o \",outdir,\" -c \",configfile,sep=\"\")\n  print(hiccmd)\n  system(hiccmd)\n}\n\n\ngenerate_matrix<-function(all_hic_file,all_bed_file,outputpdf=FALSE,matrix_dir=\"dm3\",resolution=5,chrom_file=\"chrom_dm3.sizes\")\n{\n  all_bed_data=read.table(file=all_bed_file, fill=TRUE, stringsAsFactors=FALSE)\n  all_hic_data=read.table(file=all_hic_file,fill=TRUE, stringsAsFactors=FALSE)\n  chrom_info=read.table(chrom_file,fill=TRUE, stringsAsFactors=FALSE)\n  chr_num=dim(chrom_info)[1]\n  inter_interaction=NULL\n  if(file.exists(matrix_dir)==FALSE)\n  {\n    dir.create(matrix_dir)\n  }\n  for(tttt in 1:chr_num)\n  {\n    chrname=chrom_info[tttt,1]\n    chr_bed=NULL\n    chr_bed=rbind(chr_bed,all_bed_data[all_bed_data[,1]==chrname,])\n    chr_max_length=dim(chr_bed)[1]\n    chr_hic=NULL\n    chr_hic=all_hic_data[all_hic_data[,1]>=chr_bed[1,4],]\n    chr_hic=chr_hic[chr_hic[,1]<=chr_bed[chr_max_length,4],]\n    inter_interaction=rbind(inter_interaction,chr_hic[chr_hic[,2]<chr_bed[1,4],])\n    inter_interaction=rbind(inter_interaction,chr_hic[chr_hic[,2]>chr_bed[chr_max_length,4],])\n    chr_hic=chr_hic[chr_hic[,2]>=chr_bed[1,4],]\n    chr_hic=chr_hic[chr_hic[,2]<=chr_bed[chr_max_length,4],]\n    chr_hic_data=matrix(data=0, nrow = chr_max_length, ncol = chr_max_length)\n    for(i in 1:dim(chr_hic)[1])\n    {\n      chr_hic_data[(chr_hic[i,1]-chr_bed[1,4]),(chr_hic[i,2]-chr_bed[1,4])]=chr_hic[i,3]\n      chr_hic_data[(chr_hic[i,2]-chr_bed[1,4]),(chr_hic[i,1]-chr_bed[1,4])]=chr_hic[i,3]\n    }\n    tmpfilename=paste(matrix_dir,\"/\",chrname,\".matrix\",sep=\"\")\n    write.table(chr_hic_data,tmpfilename,quote=FALSE,sep=\"\\t\",row.names=FALSE,col.names=FALSE)\n\n    if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n    {\n      pdf(paste(matrix_dir,\"/\",chrname,\"_heatmap.pdf\",sep=\"\"))\n\n    }else\n    {\n      jpeg(paste(matrix_dir,\"/\",chrname,\"_heatmap.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n    }\n    hm_dim=dim(chr_hic_data)[1]\n    hm_mean=mean(chr_hic_data)\n    for(n in 1:hm_dim)\n    {\n\n      for(nn in 1:hm_dim)\n      {\n        if(chr_hic_data[n,nn]>10*hm_mean)\n          chr_hic_data[n,nn]=10*hm_mean\n      }\n    }\n    m_color=heat.colors(100)\n    n_color=m_color\n    for(i in 1:100)\n    {\n      m_color[i]=n_color[101-i]\n    }\n    tmphm=levelplot(chr_hic_data,col.regions=m_color,xlim=c(0,hm_dim),ylim=c(0,hm_dim),xlab=\"chrom\",ylab=\"chrom\")\n    plot(tmphm)\n    dev.off()\n\n\n    rm(chr_hic_data)\n    gc()\n    mt=date()\n    print(paste(mt,\" \",chrname,\" finish!\",sep=\"\"))\n  }\n  tmpfilename=paste(matrix_dir,\"/inter_chrom.iam\",sep=\"\")\n  write.table(inter_interaction,tmpfilename,quote=FALSE,sep=\"\\t\",row.names=FALSE,col.names=FALSE)\n}\n\n\n\nif_distribution_analysis<-function(all_hic_file,all_bed_file,bedFile,inter_chromfile=NULL,groupNum=50,random_analysis=TRUE,threshold_percent=0.005,if_bin_number=20,outputpdf=FALSE,matrix_dir=\"dm3\",resolution=5,chrom_file=\"chrom_dm3.sizes\",slide_window=FALSE)\n{\n  all_bed_data=read.table(file=all_bed_file, fill=TRUE, stringsAsFactors=FALSE)\n  all_hic_data=read.table(file=all_hic_file,fill=TRUE, stringsAsFactors=FALSE)\n  colnames(all_hic_data)=c(\"loc1\",\"loc2\",\"value\")\n  colnames(all_bed_data)=c(\"chrom\",\"start\",\"end\",\"id\")\n  chrom_info=read.table(chrom_file,fill=TRUE, stringsAsFactors=FALSE)\n  chr_num=dim(chrom_info)[1]\n  m_bed_data=read.table(file=bedFile,fill=TRUE, stringsAsFactors=FALSE)\n\n  if(is.null(inter_chromfile))\n  {\n    inter_interaction=read.table(file=paste(matrix_dir,\"/inter_chrom.iam\",sep=\"\"), fill=TRUE, stringsAsFactors=FALSE)\n  }else\n  {\n    inter_interaction=read.table(file=inter_chromfile, fill=TRUE, stringsAsFactors=FALSE)\n  }\n  order_hic_data<-all_hic_data[with(all_hic_data, order(value,decreasing = TRUE)), ]\n  sum_counts=sum(order_hic_data[,3])\n  th_1=mean(inter_interaction[,3])\n  if(threshold_percent==0)\n  {\n    th_2=order_hic_data[1,3]\n  }else\n  {\n    th_2=order_hic_data[ceiling(dim(order_hic_data)[1]*threshold_percent),3]\n  }\n  if_bin_size=(th_2-th_1)/if_bin_number\n  order_hic_data=NULL\n  rm(order_hic_data)\n  gc()\n  all_hic_data=all_hic_data[which(all_hic_data[,3]>=th_1),]\n  all_hic_data=all_hic_data[which(all_hic_data[,3]<=th_2),]\n  all_hic_data=all_hic_data[which(all_hic_data[,1]!=all_hic_data[,2]),]\n\n  m_bed_loc=NULL\n  for(nn in 1:dim(m_bed_data)[1])\n  {\n    tmp_bed_loc=all_bed_data[which(all_bed_data[,1]==m_bed_data[nn,1]),]\n    tmp_bed_loc=tmp_bed_loc[which(tmp_bed_loc[,2]>(m_bed_data[nn,2]-resolution*1000)),]\n    tmp_bed_loc=tmp_bed_loc[which(tmp_bed_loc[,3]<(m_bed_data[nn,3]+resolution*1000)),]\n    m_bed_loc=rbind(m_bed_loc,tmp_bed_loc)\n  }\n  m_bed_loc=m_bed_loc[!duplicated(m_bed_loc),]\n\n  all_coverage=matrix(data=0, nrow = chr_num, ncol = if_bin_number)\n  all_actionnum=matrix(data=0,nrow=chr_num,ncol=if_bin_number)\n  all_bb_ia=matrix(data=0,nrow=chr_num,ncol = if_bin_number)\n\n  random_coverage=array(0,c(chr_num,if_bin_number,groupNum))\n  random_bb_ia=array(0,c(chr_num,if_bin_number,groupNum))\n  for(tttt in 1:chr_num)\n  {\n    chrname=chrom_info[tttt,1]\n    chr_bed=NULL\n    chr_bed=rbind(chr_bed,all_bed_data[all_bed_data[,1]==chrname,])\n    chr_max_length=dim(chr_bed)[1]\n    chr_hic=NULL\n    chr_hic=all_hic_data[all_hic_data[,1]>=chr_bed[1,4],]\n    chr_hic=chr_hic[chr_hic[,1]<=chr_bed[chr_max_length,4],]\n    chr_hic=chr_hic[chr_hic[,2]>=chr_bed[1,4],]\n    chr_hic=chr_hic[chr_hic[,2]<=chr_bed[chr_max_length,4],]\n    order_chr_hic<-chr_hic[with(chr_hic, order(value,decreasing = TRUE)), ]\n    chr_bed_loc=as.vector(m_bed_loc[which(m_bed_loc[,1]==chrname),4])\n    for(mm in 1:if_bin_number)\n    {\n      if_bin_start=th_1+(mm-1)*if_bin_size\n      if_bin_end=th_1+mm*if_bin_size\n      if_bin_hic=chr_hic[which(chr_hic[,3]>=if_bin_start),]\n      if_bin_hic=if_bin_hic[which(if_bin_hic[,3]<if_bin_end),]\n      hic_overlap=rbind(subset(if_bin_hic,loc1%in%chr_bed_loc),subset(if_bin_hic,loc2%in%chr_bed_loc))\n      hic_overlap=hic_overlap[!duplicated(hic_overlap),]\n      hic_bb_ia_1=subset(if_bin_hic,loc1%in%chr_bed_loc)\n      hic_bb_ia_1=subset(hic_bb_ia_1,loc2%in%chr_bed_loc)\n      hic_bb_ia_2=subset(if_bin_hic,loc2%in%chr_bed_loc)\n      hic_bb_ia_2=subset(hic_bb_ia_2,loc1%in%chr_bed_loc)\n      hic_bb_ia=rbind(hic_bb_ia_1,hic_bb_ia_2)\n      hic_bb_ia=hic_bb_ia[!duplicated(hic_bb_ia),]\n      all_actionnum[tttt,mm]=dim(if_bin_hic)[1]\n      all_coverage[tttt,mm]=dim(hic_overlap)[1]\n      all_bb_ia[tttt,mm]=dim(hic_bb_ia)[1]\n      if((random_analysis==TRUE)||(random_analysis==\"TRUE\")||(random_analysis==\"true\"))\n      {\n        min_loc=min(chr_bed[,4])\n        max_loc=max(chr_bed[,4])\n        loc_number=length(chr_bed_loc)\n        for(bb in 1:groupNum)\n        {\n          random_site=sample(min_loc:max_loc,size=loc_number)\n          random_site=sort(random_site)\n          random_overlap=rbind(subset(if_bin_hic,loc1%in%random_site),subset(if_bin_hic,loc2%in%random_site))\n          random_overlap=random_overlap[!duplicated(random_overlap),]\n          n_bb_ia_1=subset(if_bin_hic,loc1%in%random_site)\n          n_bb_ia_1=subset(n_bb_ia_1,loc2%in%random_site)\n          n_bb_ia_2=subset(if_bin_hic,loc2%in%random_site)\n          n_bb_ia_2=subset(n_bb_ia_2,loc1%in%random_site)\n          n_bb_ia=rbind(n_bb_ia_1,n_bb_ia_2)\n          n_bb_ia=n_bb_ia[!duplicated(n_bb_ia),]\n          random_coverage[tttt,mm,bb]=dim(random_overlap)[1]\n          random_bb_ia[tttt,mm,bb]=dim(random_overlap)[1]\n        }\n      }\n    }\n  }\n\n  coverage_percent=matrix(data=0,nrow=chr_num,ncol=if_bin_number)\n  bb_ia_percent=matrix(data=0,nrow=chr_num,ncol=if_bin_number)\n  random_cp=array(0,c(chr_num,if_bin_number,groupNum))\n  random_bb=array(0,c(chr_num,if_bin_number,groupNum))\n  sum_cp=matrix(data=0,nrow=1,ncol=if_bin_number)\n  random_sum_cp=matrix(data=0,nrow=groupNum,ncol=if_bin_number)\n  for(i1 in 1:if_bin_number)\n  {\n    if(sum(all_actionnum[,i1])!=0)\n    {\n      sum_cp[1,i1]=(sum(all_coverage[,i1]))/(sum(all_actionnum[,i1]))\n    }\n    if(sum(all_actionnum[,i1])==0)\n    {\n      sum_cp[1,i1]=0\n    }\n    if((random_analysis==TRUE)||(random_analysis==\"TRUE\")||(random_analysis==\"true\"))\n    {\n      for(i2 in 1:groupNum)\n      {\n        if(sum(all_actionnum[,i1])!=0)\n        {\n          random_sum_cp[i2,i1]=(sum(random_coverage[,i1,i2]))/(sum(all_actionnum[,i1]))\n        }\n        if(sum(all_actionnum[,i1])==0)\n        {\n          random_sum_cp[i2,i1]=0\n        }\n      }\n    }\n  }\n\n  for(i1 in 1:chr_num)\n  {\n    for(i2 in 1:if_bin_number)\n    {\n      if(all_actionnum[i1,i2]!=0)\n      {\n        coverage_percent[i1,i2]=all_coverage[i1,i2]/all_actionnum[i1,i2]\n        bb_ia_percent[i1,i2]=all_bb_ia[i1,i2]/all_actionnum[i1,i2]\n      }\n      if(all_actionnum[i1,i2]==0)\n      {\n        coverage_percent[i1,i2]=0\n        bb_ia_percent[i1,i2]=0\n      }\n      #coverage_percent[i1,i2]=all_coverage[i1,i2]/all_actionnum[i1,i2]\n      if((random_analysis==TRUE)||(random_analysis==\"TRUE\")||(random_analysis==\"true\"))\n      {\n        for(i3 in 1:groupNum)\n        {\n          if(all_actionnum[i1,i2]!=0)\n          {\n            random_cp[i1,i2,i3]=random_coverage[i1,i2,i3]/all_actionnum[i1,i2]\n            random_bb[i1,i2,i3]=random_bb_ia[i1,i2,i3]/all_actionnum[i1,i2]\n          }\n          if(all_actionnum[i1,i2]==0)\n          {\n            random_cp[i1,i2,i3]=0\n            random_bb[i1,i2,i3]=0\n          }\n        }\n      }\n    }\n  }\n\n\n  ttest_result=array(0,c(chr_num,if_bin_number,5))\n  bb_ttest_result=array(0,c(chr_num,if_bin_number,5))\n  sum_ttest=matrix(data=0,nrow = 5,ncol=if_bin_number)\n  for(i1 in 1:if_bin_number)\n  {\n    tmpttest=t.test(random_sum_cp[,i1],mu=sum_cp[1,i1])\n    sum_ttest[1,i1]=tmpttest$conf.int[1]\n    sum_ttest[2,i1]=tmpttest$conf.int[2]\n    sum_ttest[3,i1]=tmpttest$estimate\n    sum_ttest[4,i1]=sum_cp[1,i1]\n    sum_ttest[5,i1]=tmpttest$p.value\n  }\n  for(i1 in 1:chr_num)\n  {\n    for(i2 in 1:if_bin_number)\n    {\n      tmpttest=t.test(random_cp[i1,i2,],mu=coverage_percent[i1,i2])\n      ttest_result[i1,i2,1]=tmpttest$conf.int[1]\n      ttest_result[i1,i2,2]=tmpttest$conf.int[2]\n      ttest_result[i1,i2,3]=tmpttest$estimate\n      ttest_result[i1,i2,4]=coverage_percent[i1,i2]\n      ttest_result[i1,i2,5]=tmpttest$p.value\n\n      tmpttest=t.test(random_bb[i1,i2,],mu=bb_ia_percent[i1,i2])\n      bb_ttest_result[i1,i2,1]=tmpttest$conf.int[1]\n      bb_ttest_result[i1,i2,2]=tmpttest$conf.int[2]\n      bb_ttest_result[i1,i2,3]=tmpttest$estimate\n      bb_ttest_result[i1,i2,4]=coverage_percent[i1,i2]\n      bb_ttest_result[i1,i2,5]=tmpttest$p.value\n    }\n  }\n\n  m_col=c(\"#e6f5c9\",\"#ffffbf\")\n\n  if((slide_window==TRUE)||(slide_window==\"TRUE\")||(slide_window==\"true\"))\n  {\n    for(i1 in 1:chr_num)\n    {\n      chrname=chrom_info[i1,1]\n      if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n      {\n        pdf(paste(matrix_dir,\"/\",chrname,\"_if_dis_slide.pdf\",sep=\"\"),width = 8,height = 8)\n\n      }else\n      {\n        jpeg(paste(matrix_dir,\"/\",chrname,\"_if_dis_slide.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n      }\n      boxplot(t(random_cp[i1,,]),col=m_col,xlab=\"interaction frequency distribution\")\n      #lines(ttest_result[i1,,4],lwd=3,col=\"red\",lty=4)\n      m_ly=numeric(if_bin_number)\n      for(m_li in 1:(if_bin_number-2))\n      {\n        m_ly[m_li+1]=sum(ttest_result[i1,m_li:(m_li+2),4])/3\n      }\n      m_ly[1]=sum(ttest_result[i1,1:2,4])/2\n      m_ly[if_bin_number]=sum(ttest_result[i1,(if_bin_number-1):if_bin_number,4])/2\n      lines(m_ly,lwd=3,col=\"red\",lty=4)\n      dev.off()\n    }\n    if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n    {\n      pdf(paste(matrix_dir,\"/all_chrom_if_dis_slide.pdf\",sep=\"\"),width = 8,height = 8)\n\n    }else\n    {\n      jpeg(paste(matrix_dir,\"/all_chrom_if_dis_slide.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n    }\n\n    boxplot(random_sum_cp,col=m_col,xlab=\"interaction frequency distribution\")\n    #lines(sum_ttest[4,],lwd=3,col=\"red\",lty=4)\n    sum_ly=numeric(if_bin_number)\n    for(sum_li in 1:(if_bin_number-2))\n    {\n      sum_ly[sum_li+1]=sum(sum_ttest[4,sum_li:(sum_li+2)])/3\n    }\n    sum_ly[1]=sum(sum_ttest[4,1:2])/2\n    sum_ly[if_bin_number]=sum(sum_ttest[4,(if_bin_number-1):if_bin_number])/2\n    lines(sum_ly,lwd=3,col=\"red\",lty=4)\n    dev.off()\n  }else\n  {\n    for(i1 in 1:chr_num)\n    {\n      chrname=chrom_info[i1,1]\n      if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n      {\n        pdf(paste(matrix_dir,\"/\",chrname,\"_if_dis.pdf\",sep=\"\"),width = 8,height = 8)\n\n      }else\n      {\n        jpeg(paste(matrix_dir,\"/\",chrname,\"_if_dis.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n      }\n      boxplot(t(random_cp[i1,,]),col=m_col,xlab=\"interaction frequency distribution\")\n      lines(ttest_result[i1,,4],lwd=3,col=\"red\",lty=4)\n      dev.off()\n    }\n    if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n    {\n      pdf(paste(matrix_dir,\"/all_chrom_if_dis.pdf\",sep=\"\"),width = 8,height = 8)\n\n    }else\n    {\n      jpeg(paste(matrix_dir,\"/all_chrom_if_dis.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n    }\n\n    boxplot(random_sum_cp,col=m_col,xlab=\"interaction frequency distribution\")\n    lines(sum_ttest[4,],lwd=3,col=\"red\",lty=4)\n    dev.off()\n  }\n\n\n}\n\n\n\n\nnetwork_analysis<-function(bedFile,matrix_dir=\"hg19\",outputpdf=FALSE,chrom=\"all\",chrstart=0,chrend=0,resolution=100,bedWindow=0,net_layout=\"layout.fruchterman.reingold\",netplot=TRUE,NetClusterType=\"multileve\",NetVertexSize=2,NetVertexChangeSize=\"degree\",NetVertexLableDist=0.1,NetVertexColor=\"#7fbc41\",NetVertexLabelCex=3,if_threshold=0)\n{\n  gc()\n  #source(\"calbed.R\")\n  matrix_name_dir=list.files(path=matrix_dir,full.names=F,pattern=\".matrix\")\n  matrix_full_dir=list.files(path=matrix_dir,full.names=T,pattern=\".matrix\")\n  m_bed=load_bed(bedFile)\n  chrNum=length(matrix_name_dir)\n  if(chrom==\"all\")\n  {\n    for (i in 1:chrNum)\n    {\n\n\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      chrBed=choose_chr_bed(m_bed,chrName)\n      chrBedNum=dim(chrBed)[1]\n      print(matrix_full_dir[i])\n      if(chrBedNum>0)\n      {\n        print(chrName)\n        chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n        chrTotSize=dim(chrCmap)[1]\n        chrBedBin=check_bed_bin(chrBed,resolution*1000)\n        chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n        chrBedToBedInter=find_bed_to_bed_interaction(chrCmap,chrBedMatrix,chrBedBin,chrBed,chrName,chrCmap,if_threshold)\n\n        if((netplot==TRUE)||(netplot==\"true\")||(netplot==\"TRUE\"))\n        {\n          netgraph=data.frame(\"p1\"=character(dim(chrBedToBedInter)[1]),\"p2\"=character(dim(chrBedToBedInter)[1]),\"weight\"=numeric(dim(chrBedToBedInter)[1]))\n          netgraph[,1]=as.data.frame(paste(chrBedToBedInter[,2],\":\",(chrBedToBedInter[,3]+chrstart),\"-\",(chrBedToBedInter[,4]+chrstart),sep=\"\"))\n          netgraph[,2]=as.data.frame(paste(chrBedToBedInter[,8],\":\",(chrBedToBedInter[,9]+chrstart),\"-\",(chrBedToBedInter[,10]+chrstart),sep=\"\"))\n          netgraph[,3]=as.data.frame(chrBedToBedInter[,13])\n\n          set.seed(1234)\n          #pdf(paste(matrix_dir,\"/\",chrName,\"_netplot.pdf\",sep=\"\"))\n\n          if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n          {\n            pdf(paste(matrix_dir,\"/\",chrName,\"_netplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n          }else\n          {\n            jpeg(paste(matrix_dir,\"/\",chrName,\"_netplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n          }\n          #pdf(\"tmp_pdf.pdf\",width=8,height=8)\n          g = graph.data.frame(netgraph,directed = F)\n          set.seed(1234)\n\n          netnodename=names(V(g))\n          netnodechrnum=regexpr(\":\",netnodename)\n          netnodechr=substr(netnodename,1,netnodechrnum-1)\n          netnodestartnum=regexpr(\"-\",netnodename)\n          netnodestart=as.numeric(substr(netnodename,netnodechrnum+1,netnodestartnum-1))\n          netnodeendnum=nchar(netnodename)\n          netnodeend=as.numeric(substr(netnodename,netnodestartnum+1,netnodeendnum))\n\n          netcsv=data.frame(\"chrom\"=character(0),\"start\"=numeric(0),\"end\"=numeric(0),\"degree\"=numeric(0),\"closeness\"=numeric(0),\"betweenness\"=numeric(0),\"Local_cluster_coefficient\"=numeric(0),\"Eigenvector_centrality\"=numeric(0),\"membership\"=numeric(0),stringsAsFactors=FALSE)\n          netdegree=degree(g)\n          netcloseness=closeness(g)\n          netbetweenness=betweenness(g)\n          netcoefficient=transitivity(g, type=\"local\")\n          netcentrality=evcent(g)$vector\n\n          netcsv[1:(length(netdegree)),1]=netnodechr\n          netcsv[1:(length(netdegree)),2]=netnodestart\n          netcsv[1:(length(netdegree)),3]=netnodeend\n\n          netcsv[1:(length(netdegree)),4]=as.data.frame(netdegree)\n          netcsv[1:(length(netdegree)),5]=as.data.frame(netcloseness)\n          netcsv[1:(length(netdegree)),6]=as.data.frame(netbetweenness)\n          netcsv[1:(length(netdegree)),7]=as.data.frame(netcoefficient)\n          netcsv[1:(length(netdegree)),8]=as.data.frame(netcentrality)\n          #colors<-c(\"#f7f4f9\",\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\")\n          colors<-c(\"#fff7f3\",\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#b0017e\",\"#7a0177\",\"#49006a\")\n          #colors<-c(\"#fff7fb\",\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#570b0\",\"#45a8d\",\"#23858\")\n          #colors<-c(\"#ffffcc\",\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#b00026\")\n          #colors<-c(\"#f7fbff\",\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#8519c\",\"#8306b\")\n          weight_range=range(E(g)$weight)\n          E(g)$color=colors[1]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$color=colors[2]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$color=colors[3]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$color=colors[4]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$color=colors[5]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$color=colors[6]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$color=colors[7]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$color=colors[8]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$color=colors[9]\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$color=colors[10]\n\n          edge_width=0.05\n          E(g)$width=edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$width=2*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$width=3*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$width=4*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$width=5*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$width=6*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$width=7*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$width=8*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$width=9*edge_width\n          E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$width=10*edge_width\n\n          if(NetVertexChangeSize==\"degree\")\n          {\n            V(g)$deg<-netcsv[,4]\n            deg_range=range(netcsv[,4])\n            V(g)$size=NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n          }else if(NetVertexChangeSize==\"closeness\")\n          {\n            V(g)$deg<-netcsv[,5]\n            deg_range=range(netcsv[,5])\n            V(g)$size=NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n          }else if(NetVertexChangeSize==\"betweenness\")\n          {\n            V(g)$deg<-netcsv[,6]\n            deg_range=range(netcsv[,6])\n            V(g)$size=NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n          }else if(NetVertexChangeSize==\"Local_cluster_coefficient\")\n          {\n            V(g)$deg<-netcsv[,7]\n            deg_range=range(netcsv[,7])\n            V(g)$size=NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n          }else if(NetVertexChangeSize==\"Eigenvector_centrality\")\n          {\n            V(g)$deg<-netcsv[,8]\n            deg_range=range(netcsv[,8])\n            V(g)$size=NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n            V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n          }else\n          {\n            V(g)$size=NetVertexSize\n          }\n\n          if(net_layout==\"layout.fruchterman.reingold\")\n          {\n\n            if(NetClusterType==\"NULL\")\n            {\n              plot(g,layout=layout.fruchterman.reingold, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=\"NULL\"\n            }\n            if(NetClusterType==\"edgeBetweenness\")\n            {\n              system.time(ec <- edge.betweenness.community(g))\n              print(modularity(ec))\n              netcsv[1:(length(netdegree)),9]=ec$membership\n              plot(ec, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n            }\n            if(NetClusterType==\"walktrap\")\n            {\n              system.time(wc <- walktrap.community(g))\n              netcsv[1:(length(netdegree)),9]=wc$membership\n\n              print(modularity(wc))\n              plot(wc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n            }\n            if(NetClusterType==\"multileve\")\n            {\n              system.time(mc <- multilevel.community(g, weights=NA))\n              print(modularity(mc))\n              plot(mc, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=mc$membership\n\n            }\n            if(NetClusterType==\"labelPropagation\")\n            {\n              system.time(lc <- label.propagation.community(g))\n              print(modularity(lc))\n              plot(lc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=lc$membership\n\n            }\n          }else if(net_layout==\"layout.circle\")\n          {\n            if(NetClusterType==\"NULL\")\n            {\n              plot(g,layout=layout.circle, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=\"NULL\"\n            }\n            if(NetClusterType==\"edgeBetweenness\")\n            {\n              system.time(ec <- edge.betweenness.community(g))\n              print(modularity(ec))\n              netcsv[1:(length(netdegree)),9]=ec$membership\n              plot(ec, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n            }\n            if(NetClusterType==\"walktrap\")\n            {\n              system.time(wc <- walktrap.community(g))\n              netcsv[1:(length(netdegree)),9]=wc$membership\n\n              print(modularity(wc))\n              plot(wc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n            }\n            if(NetClusterType==\"multileve\")\n            {\n              system.time(mc <- multilevel.community(g, weights=NA))\n              print(modularity(mc))\n              plot(mc, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=mc$membership\n\n            }\n            if(NetClusterType==\"labelPropagation\")\n            {\n              system.time(lc <- label.propagation.community(g))\n              print(modularity(lc))\n              plot(lc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=lc$membership\n\n            }\n          }else\n          {\n            if(NetClusterType==\"NULL\")\n            {\n              plot(g,layout=layout.auto, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=\"NULL\"\n            }\n            if(NetClusterType==\"edgeBetweenness\")\n            {\n              system.time(ec <- edge.betweenness.community(g))\n              print(modularity(ec))\n              netcsv[1:(length(netdegree)),9]=ec$membership\n              plot(ec, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n            }\n            if(NetClusterType==\"walktrap\")\n            {\n              system.time(wc <- walktrap.community(g))\n              netcsv[1:(length(netdegree)),9]=wc$membership\n\n              print(modularity(wc))\n              plot(wc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n            }\n            if(NetClusterType==\"multileve\")\n            {\n              system.time(mc <- multilevel.community(g, weights=NA))\n              print(modularity(mc))\n              plot(mc, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=mc$membership\n\n            }\n            if(NetClusterType==\"labelPropagation\")\n            {\n              system.time(lc <- label.propagation.community(g))\n              print(modularity(lc))\n              plot(lc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n              netcsv[1:(length(netdegree)),9]=lc$membership\n\n            }\n          }\n\n          dev.off()\n\n          write.csv(netcsv,paste(matrix_dir,\"/\",chrName,\"_network.csv\",sep=\"\"),row.names = FALSE)\n        }\n\n\n        bedIplot=cbind(rbind(chrBedToBedInter[,14],chrBedToBedInter[,15]),rbind(chrBedToBedInter[,15],chrBedToBedInter[,14]))\n        hm_dim=dim(chrCmap)[1]\n        chrCmap=as.matrix(chrCmap)\n\n\n        hm_mean=mean(chrCmap)\n        for(j in 1:hm_dim)\n        {\n\n          chrCmap[j,which(chrCmap[j,]>5*hm_mean)]=5*hm_mean\n        }\n        chrhmCmap=melt(chrCmap)\n        print(paste(\"plot \",chrName,\"bed picture\",sep=\"\"))\n\n        if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n        {\n          pdf(paste(matrix_dir,\"/\",chrName,\"_bedplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n        }else\n        {\n          jpeg(paste(matrix_dir,\"/\",chrName,\"_bedplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n        }\n\n        grid.newpage()\n        heatmapViewport <- viewport(height=0.5, width=0.5, x=0.25,y=0.5)\n        scatterViewport <- viewport(height=0.5, width=0.5, x=0.75,y=0.5)\n        densityViewport <- viewport(height=0.25,width=0.5, x=0.75,y=0.125)\n        hmdensityViewport <- viewport(height=0.25,width=0.5,x=0.25,y=0.125)\n        jit=position_jitter(width=0.5)\n        hmrange=range(chrhmCmap[,1])\n        bedIplot=bedIplot+hmrange[1]\n        chrhm = ggplot(chrhmCmap, aes(x=Var1, y=Var2, fill=value))+scale_y_discrete(breaks=seq(0, 10, 5))+xlab('chrom')+ylab(\"chrom\")+scale_fill_gradient(low='white', high='red')+geom_tile()+guides(fill=FALSE)\n        chrbedplot=qplot(bedIplot[1,],bedIplot[2,],alpha=I(1/10),size=I(1))+xlab('chrom')+ylab(\"chrom\")+geom_jitter(position=jit,colour=\"black\",alpha=1/100)\n\n        chrbeddensitydata=as.data.frame(c(chrBedToBedInter[,14],chrBedToBedInter[,15]))\n        chrbeddensitydata=chrbeddensitydata+hmrange[1]\n        colnames(chrbeddensitydata)=\"bed\"\n        chrbeddensity=ggplot(chrbeddensitydata)+geom_density(aes(x=bed))\n        chrhmdensitydata=NULL\n        for(iiii in 1:chrTotSize)\n        {\n          #pp[iiii,1]=length(which(chrCmap[,iiii]>0))\n          chrhmdensitydata=c(chrhmdensitydata,which(chrCmap[,iiii]>0))\n        }\n        chrhmdensitydata=as.data.frame(chrhmdensitydata)\n        chrhmdensitydata=chrhmdensitydata+hmrange[1]\n        colnames(chrhmdensitydata)=\"chrom\"\n        chrcmapdensity=ggplot(chrhmdensitydata)+geom_density(aes(x=chrom))\n        print(chrhm,vp=heatmapViewport)\n        print(chrbedplot,vp=scatterViewport)\n        print(chrbeddensity,vp=densityViewport)\n        print(chrcmapdensity,vp=hmdensityViewport)\n\n        dev.off()\n\n        write.table(chrBedToBedInter,file=paste(matrix_dir,\"/\",chrName,\"_BedToBedInter.txt\",sep=\"\"),sep=\"\\t\",row.names=FALSE,col.names=FALSE,quote=FALSE)\n        rm(chrCmap)\n        rm(chrBed)\n        rm(chrBedBin)\n        rm(chrBedMatrix)\n        rm(chrBedToBedInter)\n        gc()\n      }\n    }\n  }else\n  {\n    for (i in 1:chrNum)\n    {\n\n\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      if(chrName==chrom)\n      {\n        if(chrend<=0)\n        {\n          chrBed=choose_chr_bed(m_bed,chrName)\n          chrBedNum=dim(chrBed)[1]\n          print(matrix_full_dir[i])\n          if(chrBedNum>0)\n          {\n            print(chrName)\n            chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n            chrTotSize=dim(chrCmap)[1]\n            chrBedBin=check_bed_bin(chrBed,resolution*1000)\n            chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n            chrBedToBedInter=find_bed_to_bed_interaction(chrCmap,chrBedMatrix,chrBedBin,chrBed,chrName,chrCmap,if_threshold)\n\n            if((netplot==TRUE)||(netplot==\"true\")||(netplot==\"TRUE\"))\n            {\n              netgraph=data.frame(\"p1\"=character(dim(chrBedToBedInter)[1]),\"p2\"=character(dim(chrBedToBedInter)[1]),\"weight\"=numeric(dim(chrBedToBedInter)[1]))\n              netgraph[,1]=as.data.frame(paste(chrBedToBedInter[,2],\":\",(chrBedToBedInter[,3]+chrstart),\"-\",(chrBedToBedInter[,4]+chrstart),sep=\"\"))\n              netgraph[,2]=as.data.frame(paste(chrBedToBedInter[,8],\":\",(chrBedToBedInter[,9]+chrstart),\"-\",(chrBedToBedInter[,10]+chrstart),sep=\"\"))\n              netgraph[,3]=as.data.frame(chrBedToBedInter[,13])\n              set.seed(1234)\n              if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n              {\n                pdf(paste(matrix_dir,\"/\",chrName,\"_netplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n              }else\n              {\n                jpeg(paste(matrix_dir,\"/\",chrName,\"_netplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n              }\n              #pdf(\"tmp_pdf.pdf\",width=8,height=8)\n              g = graph.data.frame(netgraph,directed = F)\n              set.seed(1234)\n\n              netnodename=names(V(g))\n              netnodechrnum=regexpr(\":\",netnodename)\n              netnodechr=substr(netnodename,1,netnodechrnum-1)\n              netnodestartnum=regexpr(\"-\",netnodename)\n              netnodestart=as.numeric(substr(netnodename,netnodechrnum+1,netnodestartnum-1))\n              netnodeendnum=nchar(netnodename)\n              netnodeend=as.numeric(substr(netnodename,netnodestartnum+1,netnodeendnum))\n\n              netcsv=data.frame(\"chrom\"=character(0),\"start\"=numeric(0),\"end\"=numeric(0),\"degree\"=numeric(0),\"closeness\"=numeric(0),\"betweenness\"=numeric(0),\"Local_cluster_coefficient\"=numeric(0),\"Eigenvector_centrality\"=numeric(0),\"membership\"=numeric(0),stringsAsFactors=FALSE)\n              netdegree=degree(g)\n              netcloseness=closeness(g)\n              netbetweenness=betweenness(g)\n              netcoefficient=transitivity(g, type=\"local\")\n              netcentrality=evcent(g)$vector\n\n              netcsv[1:(length(netdegree)),1]=netnodechr\n              netcsv[1:(length(netdegree)),2]=netnodestart\n              netcsv[1:(length(netdegree)),3]=netnodeend\n\n              netcsv[1:(length(netdegree)),4]=as.data.frame(netdegree)\n              netcsv[1:(length(netdegree)),5]=as.data.frame(netcloseness)\n              netcsv[1:(length(netdegree)),6]=as.data.frame(netbetweenness)\n              netcsv[1:(length(netdegree)),7]=as.data.frame(netcoefficient)\n              netcsv[1:(length(netdegree)),8]=as.data.frame(netcentrality)\n              #colors<-c(\"#f7f4f9\",\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\")\n              colors<-c(\"#fff7f3\",\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#b0017e\",\"#7a0177\",\"#49006a\")\n              #colors<-c(\"#fff7fb\",\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#570b0\",\"#45a8d\",\"#23858\")\n              #colors<-c(\"#ffffcc\",\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#b00026\")\n              #colors<-c(\"#f7fbff\",\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#8519c\",\"#8306b\")\n              weight_range=range(E(g)$weight)\n              E(g)$color=colors[1]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$color=colors[2]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$color=colors[3]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$color=colors[4]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$color=colors[5]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$color=colors[6]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$color=colors[7]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$color=colors[8]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$color=colors[9]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$color=colors[10]\n\n              edge_width=0.05\n              E(g)$width=edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$width=2*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$width=3*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$width=4*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$width=5*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$width=6*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$width=7*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$width=8*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$width=9*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$width=10*edge_width\n\n              if(NetVertexChangeSize==\"degree\")\n              {\n                V(g)$deg<-netcsv[,4]\n                deg_range=range(netcsv[,4])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"closeness\")\n              {\n                V(g)$deg<-netcsv[,5]\n                deg_range=range(netcsv[,5])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"betweenness\")\n              {\n                V(g)$deg<-netcsv[,6]\n                deg_range=range(netcsv[,6])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"Local_cluster_coefficient\")\n              {\n                V(g)$deg<-netcsv[,7]\n                deg_range=range(netcsv[,7])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"Eigenvector_centrality\")\n              {\n                V(g)$deg<-netcsv[,8]\n                deg_range=range(netcsv[,8])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else\n              {\n                V(g)$size=NetVertexSize\n              }\n\n\n              if(net_layout==\"layout.fruchterman.reingold\")\n              {\n\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.fruchterman.reingold, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }else if(net_layout==\"layout.circle\")\n              {\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.circle, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }else\n              {\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.auto, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }\n              dev.off()\n              write.csv(netcsv,paste(matrix_dir,\"/\",chrName,\"_network.csv\",sep=\"\"),row.names = FALSE)\n\n            }\n            bedIplot=cbind(rbind(chrBedToBedInter[,14],chrBedToBedInter[,15]),rbind(chrBedToBedInter[,15],chrBedToBedInter[,14]))\n            write.table(chrBedToBedInter,file=paste(matrix_dir,\"/\",chrName,\"_BedToBedInter.txt\",sep=\"\"),sep=\"\\t\",row.names=FALSE,col.names=FALSE,quote=FALSE)\n\n            hm_dim=dim(chrCmap)[1]\n            chrCmap=as.matrix(chrCmap)\n            hm_mean=mean(chrCmap)\n            for(j in 1:hm_dim)\n            {\n\n              chrCmap[j,which(chrCmap[j,]>5*hm_mean)]=5*hm_mean\n            }\n            chrhmCmap=melt(chrCmap)\n            print(paste(\"plot \",chrName,\"bed picture\",sep=\"\"))\n            if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n            {\n              pdf(paste(matrix_dir,\"/\",chrName,\"_bedplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n            }else\n            {\n              jpeg(paste(matrix_dir,\"/\",chrName,\"_bedplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n            }\n\n            grid.newpage()\n            heatmapViewport <- viewport(height=0.5, width=0.5, x=0.25,y=0.5)\n            scatterViewport <- viewport(height=0.5, width=0.5, x=0.75,y=0.5)\n            densityViewport <- viewport(height=0.25,width=0.5, x=0.75,y=0.125)\n            hmdensityViewport <- viewport(height=0.25,width=0.5,x=0.25,y=0.125)\n            jit=position_jitter(width=0.5)\n            hmrange=range(chrhmCmap[,1])\n            bedIplot=bedIplot+hmrange[1]\n            chrhm = ggplot(chrhmCmap, aes(x=Var1, y=Var2, fill=value))+scale_y_discrete(breaks=seq(0, 10, 5))+xlab('chrom')+ylab(\"chrom\")+scale_fill_gradient(low='white', high='red')+geom_tile()+guides(fill=FALSE)\n            chrbedplot=qplot(bedIplot[1,],bedIplot[2,],alpha=I(1/10),size=I(1))+xlab('chrom')+ylab(\"chrom\")+geom_jitter(position=jit,colour=\"black\",alpha=1/100)\n\n            chrbeddensitydata=as.data.frame(c(chrBedToBedInter[,14],chrBedToBedInter[,15]))\n            chrbeddensitydata=chrbeddensitydata+hmrange[1]\n\n            colnames(chrbeddensitydata)=\"bed\"\n            chrbeddensity=ggplot(chrbeddensitydata)+geom_density(aes(x=bed))\n\n            chrhmdensitydata=NULL\n            for(iiii in 1:chrTotSize)\n            {\n              #pp[iiii,1]=length(which(chrCmap[,iiii]>0))\n              chrhmdensitydata=c(chrhmdensitydata,which(chrCmap[,iiii]>0))\n            }\n            chrhmdensitydata=as.data.frame(chrhmdensitydata)\n            chrhmdensitydata=chrhmdensitydata+hmrange[1]\n            colnames(chrhmdensitydata)=\"chrom\"\n\n\n            chrcmapdensity=ggplot(chrhmdensitydata)+geom_density(aes(x=chrom))\n\n\n\n            print(chrhm,vp=heatmapViewport)\n            print(chrbedplot,vp=scatterViewport)\n            print(chrbeddensity,vp=densityViewport)\n            print(chrcmapdensity,vp=hmdensityViewport)\n\n            dev.off()\n            rm(chrCmap)\n            rm(chrBed)\n            rm(chrBedBin)\n            rm(chrBedMatrix)\n            rm(chrBedToBedInter)\n            gc()\n          }\n\n\n\n        }else\n        {\n          chrBed=choose_chr_bed(m_bed,chrName)\n          chrBed=chrBed[which(chrBed[,3]<chrend),]\n          chrBed[,2]=chrBed[,2]-chrstart\n          chrBed[,3]=chrBed[,3]-chrstart\n          chrBed=chrBed[which(chrBed[,2]>0),]\n          chrBedNum=dim(chrBed)[1]\n\n          print(matrix_full_dir[i])\n          if(chrBedNum>0)\n          {\n\n            print(chrName)\n            chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n\n            tmpCmapStart=abs(ceiling((chrstart/(resolution*1000))))\n            tmpCmapEnd=abs(ceiling((chrend/(resolution*1000))))\n\n            chrTotSize=dim(chrCmap)[1]\n            if(tmpCmapEnd<tmpCmapStart)\n            {\n              print(\"please input correct start and end number\")\n              break\n            }\n            if(tmpCmapEnd>chrTotSize)\n            {\n              tmpCmapEnd=chrTotSize\n            }\n            if(tmpCmapStart>chrTotSize)\n            {\n              tmpCmapStart=chrTotSize\n            }\n            chrCmap=chrCmap[tmpCmapStart:tmpCmapEnd,tmpCmapStart:tmpCmapEnd]\n            chrTotSize=dim(chrCmap)[1]\n\n\n\n            chrBedBin=check_bed_bin(chrBed,resolution*1000)\n            chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n\n            chrBedToBedInter=find_bed_to_bed_interaction(chrCmap,chrBedMatrix,chrBedBin,chrBed,chrName,chrCmap,if_threshold)\n\n            if((netplot==TRUE)||(netplot==\"true\")||(netplot==\"TRUE\"))\n            {\n              netgraph=data.frame(\"p1\"=character(dim(chrBedToBedInter)[1]),\"p2\"=character(dim(chrBedToBedInter)[1]),\"weight\"=numeric(dim(chrBedToBedInter)[1]))\n              netgraph[,1]=as.data.frame(paste(chrBedToBedInter[,2],\":\",(chrBedToBedInter[,3]+chrstart),\"-\",(chrBedToBedInter[,4]+chrstart),sep=\"\"))\n              netgraph[,2]=as.data.frame(paste(chrBedToBedInter[,8],\":\",(chrBedToBedInter[,9]+chrstart),\"-\",(chrBedToBedInter[,10]+chrstart),sep=\"\"))\n              netgraph[,3]=as.data.frame(chrBedToBedInter[,13])\n\n              set.seed(1234)\n\n              if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n              {\n                pdf(paste(matrix_dir,\"/\",chrName,\"_netplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n              }else\n              {\n                jpeg(paste(matrix_dir,\"/\",chrName,\"_netplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n              }\n              #pdf(\"tmp_pdf.pdf\",width=8,height=8)\n              g = graph.data.frame(netgraph,directed = F)\n              set.seed(1234)\n\n              netnodename=names(V(g))\n              netnodechrnum=regexpr(\":\",netnodename)\n              netnodechr=substr(netnodename,1,netnodechrnum-1)\n              netnodestartnum=regexpr(\"-\",netnodename)\n              netnodestart=as.numeric(substr(netnodename,netnodechrnum+1,netnodestartnum-1))\n              netnodeendnum=nchar(netnodename)\n              netnodeend=as.numeric(substr(netnodename,netnodestartnum+1,netnodeendnum))\n\n              netcsv=data.frame(\"chrom\"=character(0),\"start\"=numeric(0),\"end\"=numeric(0),\"degree\"=numeric(0),\"closeness\"=numeric(0),\"betweenness\"=numeric(0),\"Local_cluster_coefficient\"=numeric(0),\"Eigenvector_centrality\"=numeric(0),\"membership\"=numeric(0),stringsAsFactors=FALSE)\n              netdegree=degree(g)\n              netcloseness=closeness(g)\n              netbetweenness=betweenness(g)\n              netcoefficient=transitivity(g, type=\"local\")\n              netcentrality=evcent(g)$vector\n\n              netcsv[1:(length(netdegree)),1]=netnodechr\n              netcsv[1:(length(netdegree)),2]=netnodestart\n              netcsv[1:(length(netdegree)),3]=netnodeend\n\n              netcsv[1:(length(netdegree)),4]=as.data.frame(netdegree)\n              netcsv[1:(length(netdegree)),5]=as.data.frame(netcloseness)\n              netcsv[1:(length(netdegree)),6]=as.data.frame(netbetweenness)\n              netcsv[1:(length(netdegree)),7]=as.data.frame(netcoefficient)\n              netcsv[1:(length(netdegree)),8]=as.data.frame(netcentrality)\n              #colors<-c(\"#f7f4f9\",\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\")\n              colors<-c(\"#fff7f3\",\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#b0017e\",\"#7a0177\",\"#49006a\")\n              #colors<-c(\"#fff7fb\",\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#570b0\",\"#45a8d\",\"#23858\")\n              #colors<-c(\"#ffffcc\",\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#b00026\")\n              #colors<-c(\"#f7fbff\",\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#8519c\",\"#8306b\")\n              weight_range=range(E(g)$weight)\n              E(g)$color=colors[1]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$color=colors[2]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$color=colors[3]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$color=colors[4]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$color=colors[5]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$color=colors[6]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$color=colors[7]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$color=colors[8]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$color=colors[9]\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$color=colors[10]\n\n              edge_width=0.05\n              E(g)$width=edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])/10)]$width=2*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*2/10)]$width=3*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*3/10)]$width=4*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*4/10)]$width=5*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*5/10)]$width=6*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*6/10)]$width=7*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*7/10)]$width=8*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*8/10)]$width=9*edge_width\n              E(g)[weight>=(weight_range[1]+(weight_range[2]-weight_range[1])*9/10)]$width=10*edge_width\n\n              if(NetVertexChangeSize==\"degree\")\n              {\n                V(g)$deg<-netcsv[,4]\n                deg_range=range(netcsv[,4])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"closeness\")\n              {\n                V(g)$deg<-netcsv[,5]\n                deg_range=range(netcsv[,5])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"betweenness\")\n              {\n                V(g)$deg<-netcsv[,6]\n                deg_range=range(netcsv[,6])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"Local_cluster_coefficient\")\n              {\n                V(g)$deg<-netcsv[,7]\n                deg_range=range(netcsv[,7])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else if(NetVertexChangeSize==\"Eigenvector_centrality\")\n              {\n                V(g)$deg<-netcsv[,8]\n                deg_range=range(netcsv[,8])\n                V(g)$size=NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])/5)]$size=2*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*2/5)]$size=3*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*3/5)]$size=4*NetVertexSize\n                V(g)[deg>=(deg_range[1]+(deg_range[2]-deg_range[1])*4/5)]$size=5*NetVertexSize\n              }else\n              {\n                V(g)$size=NetVertexSize\n              }\n\n              if(net_layout==\"layout.fruchterman.reingold\")\n              {\n\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.fruchterman.reingold, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.fruchterman.reingold,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }else if(net_layout==\"layout.circle\")\n              {\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.circle, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.circle,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }else\n              {\n                if(NetClusterType==\"NULL\")\n                {\n                  plot(g,layout=layout.auto, vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=\"NULL\"\n                }\n                if(NetClusterType==\"edgeBetweenness\")\n                {\n                  system.time(ec <- edge.betweenness.community(g))\n                  print(modularity(ec))\n                  netcsv[1:(length(netdegree)),9]=ec$membership\n                  plot(ec, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                }\n                if(NetClusterType==\"walktrap\")\n                {\n                  system.time(wc <- walktrap.community(g))\n                  netcsv[1:(length(netdegree)),9]=wc$membership\n\n                  print(modularity(wc))\n                  plot(wc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n\n                }\n                if(NetClusterType==\"multileve\")\n                {\n                  system.time(mc <- multilevel.community(g, weights=NA))\n                  print(modularity(mc))\n                  plot(mc, g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=mc$membership\n\n                }\n                if(NetClusterType==\"labelPropagation\")\n                {\n                  system.time(lc <- label.propagation.community(g))\n                  print(modularity(lc))\n                  plot(lc , g,layout=layout.auto,vertex.label.dist=NetVertexLableDist, vertex.color=NetVertexColor, edge.arrow.size=0.05,vertex.label.cex=NetVertexLabelCex)\n                  netcsv[1:(length(netdegree)),9]=lc$membership\n\n                }\n              }\n              dev.off()\n              write.csv(netcsv,paste(matrix_dir,\"/\",chrName,\"_network.csv\",sep=\"\"),row.names = FALSE)\n\n            }\n\n\n            bedIplot=cbind(rbind(chrBedToBedInter[,14],chrBedToBedInter[,15]),rbind(chrBedToBedInter[,15],chrBedToBedInter[,14]))\n            write.table(chrBedToBedInter,file=paste(matrix_dir,\"/\",chrName,\"_BedToBedInter.txt\",sep=\"\"),sep=\"\\t\",row.names=FALSE,col.names=FALSE,quote=FALSE)\n\n            hm_dim=dim(chrCmap)[1]\n            chrCmap=as.matrix(chrCmap)\n            hm_mean=mean(chrCmap)\n            for(j in 1:hm_dim)\n            {\n\n              chrCmap[j,which(chrCmap[j,]>5*hm_mean)]=5*hm_mean\n            }\n            chrhmCmap=melt(chrCmap)\n            print(paste(\"plot \",chrName,\"bed picture\",sep=\"\"))\n            if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n            {\n              pdf(paste(matrix_dir,\"/\",chrName,\"_bedplot.pdf\",sep=\"\"),width = 8,height = 8)\n\n            }else\n            {\n              jpeg(paste(matrix_dir,\"/\",chrName,\"_bedplot.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n            }\n\n            grid.newpage()\n            heatmapViewport <- viewport(height=0.5, width=0.5, x=0.25,y=0.5)\n            scatterViewport <- viewport(height=0.5, width=0.5, x=0.75,y=0.5)\n            densityViewport <- viewport(height=0.25,width=0.5, x=0.75,y=0.125)\n            hmdensityViewport <- viewport(height=0.25,width=0.5,x=0.25,y=0.125)\n            jit=position_jitter(width=0.5)\n            hmrange=range(chrhmCmap[,1])\n            #print(bedIplot)\n            #print(hmrange)\n            bedIplot=bedIplot+hmrange[1]\n            chrhm = ggplot(chrhmCmap, aes(x=Var1, y=Var2, fill=value))+scale_y_discrete(breaks=seq(0, 10, 5))+xlab('chrom')+ylab(\"chrom\")+scale_fill_gradient(low='white', high='red')+geom_tile()+guides(fill=FALSE)\n            chrbedplot=qplot(bedIplot[1,],bedIplot[2,],alpha=I(1/10),size=I(1))+xlab('chrom')+ylab(\"chrom\")+geom_jitter(position=jit,colour=\"black\",alpha=1/100)\n\n            chrbeddensitydata=as.data.frame(c(chrBedToBedInter[,14],chrBedToBedInter[,15]))\n            chrbeddensitydata=chrbeddensitydata+hmrange[1]\n            colnames(chrbeddensitydata)=\"bed\"\n            chrbeddensity=ggplot(chrbeddensitydata)+geom_density(aes(x=bed))\n\n            chrhmdensitydata=NULL\n            for(iiii in 1:chrTotSize)\n            {\n              #pp[iiii,1]=length(which(chrCmap[,iiii]>0))\n              chrhmdensitydata=c(chrhmdensitydata,which(chrCmap[,iiii]>0))\n            }\n            chrhmdensitydata=as.data.frame(chrhmdensitydata)\n            chrhmdensitydata=chrhmdensitydata+hmrange[1]\n            colnames(chrhmdensitydata)=\"chrom\"\n\n\n            chrcmapdensity=ggplot(chrhmdensitydata)+geom_density(aes(x=chrom))\n\n\n\n            print(chrhm,vp=heatmapViewport)\n            print(chrbedplot,vp=scatterViewport)\n            print(chrbeddensity,vp=densityViewport)\n            print(chrcmapdensity,vp=hmdensityViewport)\n\n            dev.off()\n\n\n            rm(chrCmap)\n            rm(chrBed)\n            rm(chrBedBin)\n            rm(chrBedMatrix)\n            rm(chrBedToBedInter)\n            gc()\n          }\n        }\n\n      }\n\n    }\n  }\n\n}\n\n\ncircos_plot<-function(bedFile,wig_dir=\"wig\",matrix_dir=\"hg19\",bedWindow=0,outputpdf=TRUE,chrom=\"all\",chrstart=0,chrend=0,resolution=100,circosLineWidth=0.01,if_threshold=0,circosLinecolor=\"ReadCounts\",circosTrackWidth=40)\n{\n  #source(\"calbed.R\")\n  gc()\n  matrix_name_dir=list.files(path=matrix_dir,full.names=F,pattern=\".matrix\")\n  matrix_full_dir=list.files(path=matrix_dir,full.names=T,pattern=\".matrix\")\n  all_wig_file=list.files(path=wig_dir,full.names=T,pattern=\".wig\")\n  all_wig_name=list.files(path=wig_dir,full.names = FALSE,pattern = \".wig\")\n  all_wig_num=length(all_wig_file)\n  m_bed=load_bed(bedFile)\n  chrNum=length(matrix_name_dir)\n  options(stringsAsFactors = FALSE);\n\n  genomeFrame=data.frame(\"seg.name\"=character(0),\"seg.start\"=numeric(0),\"seg.end\"=numeric(0),\"the.v\"=character(0),\"NO\"=character(0),stringsAsFactors=FALSE)\n  genomeFrameNum=1\n  print(\"generate genome frame\")\n  for (i in 1:chrNum)\n  {\n    chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n    chrTotSize=dim(chrCmap)[1]\n    tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n    chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n\n    if(chrName==chrom)\n    {\n      if(chrend>0)\n      {\n        tmpCmapStart=abs(ceiling((chrstart/(resolution*1000))))\n        tmpCmapEnd=abs(ceiling((chrend/(resolution*1000))))\n        if(tmpCmapEnd<tmpCmapStart)\n        {\n          print(\"please input correct start and end number\")\n          break\n        }\n        if(tmpCmapEnd>chrTotSize)\n        {\n          tmpCmapEnd=chrTotSize\n        }\n        if(tmpCmapStart>chrTotSize)\n        {\n          tmpCmapStart=chrTotSize\n        }\n        chrCmap=chrCmap[tmpCmapStart:tmpCmapEnd,tmpCmapStart:tmpCmapEnd]\n        chrTotSize=dim(chrCmap)[1]\n      }\n    }\n\n    for (ii in 1:chrTotSize)\n    {\n      genomeFrame[genomeFrameNum,1]=chrName\n      genomeFrame[genomeFrameNum,2]=resolution*1000*(ii-1)\n      genomeFrame[genomeFrameNum,3]=resolution*1000*ii\n      genomeFrame[genomeFrameNum,4]=NA\n      genomeFrame[genomeFrameNum,5]=NA\n      genomeFrameNum=genomeFrameNum+1\n    }\n    print(paste(chrName,\" frame generate finished!\",sep = \"\"))\n\n\n    rm(chrCmap)\n    gc()\n  }\n\n  if(chrom==\"all\")\n  {\n    for (i in 1:chrNum)\n    {\n\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      chrBed=choose_chr_bed(m_bed,chrName)\n      chrBedNum=dim(chrBed)[1]\n      if(chrBedNum>0)\n      {\n        chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n        chrTotSize=dim(chrCmap)[1]\n        tmpNum2=regexpr(\"r\",chrName)\n        chrNo=substr(chrName,tmpNum2+1,nchar(chrName))\n        chrBedBin=check_bed_bin(chrBed,resolution*1000)\n        chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n        print(paste(\"plot \",chrName,\"circos picture\",sep=\"\"))\n\n        chrCircosMapping=calculate_omiccircos_data(chrCmap,chrBedMatrix,chrBedBin,chrBed,chrName,chrCmap,if_threshold)\n\n        chrCircosMapping[,1]=chrNo\n        chrCircosMapping[,4]=chrNo\n        chrCircosDb=segAnglePo(genomeFrame, seg=chrName)\n        seg.num<-length(unique(genomeFrame[,1]))\n        colors<-rainbow(seg.num, alpha=0.5)\n\n\n        if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n        {\n          pdf(paste(matrix_dir,\"/\",chrName,\"_circos.pdf\",sep=\"\"),width = 8,height = 8)\n\n        }else\n        {\n          jpeg(paste(matrix_dir,\"/\",chrName,\"_circos.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n        }\n        #pdf(\"tmp_circos.pdf\",width = 8,height = 8)\n        options(stringsAsFactors = FALSE);\n\n        par(mar=c(2, 2, 2, 2));\n        plot(c(1,800), c(1,800), type=\"n\", axes=FALSE, xlab=\"\", ylab=\"\", main=\"\");\n        if(circosLinecolor==\"rainbow\")\n        {\n          colors<-rainbow(seg.num, alpha=0.5)\n          circosLinecolor=colors\n          circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping, type=\"link2\", lwd=circosLineWidth,col=colors);\n        }else if(circosLinecolor==\"ReadCounts\")\n        {\n          #colors<-c(\"#f7f4f9\",\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\")\n          colors<-c(\"#fff7f3\",\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#b0017e\",\"#7a0177\",\"#49006a\")\n          #colors<-c(\"#fff7fb\",\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#0570b0\",\"#045a8d\",\"#023858\")\n          #colors<-c(\"#ffffcc\",\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#b00026\")\n          #colors<-c(\"#f7fbff\",\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#08519c\",\"#08306b\")\n          chrCircosMapping[,7]=as.numeric(chrCircosMapping[,7])\n          chrCircosMapping<-chrCircosMapping[with(chrCircosMapping, order(read_count,decreasing = FALSE)), ]\n          ccm_dim=dim(chrCircosMapping)[1]\n          for(ccm in 1:10)\n          {\n            ccm_start=1+ceiling((ccm_dim/10)*(ccm-1))\n            ccm_end=ceiling((ccm_dim/10)*ccm)\n            circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping[ccm_start:ccm_end,], type=\"link2\", lwd=circosLineWidth*ccm,col=colors[ccm]);\n          }\n        }else\n        {\n          circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping, type=\"link2\", lwd=circosLineWidth,col=circosLinecolor);\n        }\n\n        all_wig_hm=NULL\n        all_bed_wig_hm=NULL\n\n        if(all_wig_num>0)\n        {\n          for(ww in 1:all_wig_num)\n          {\n            m_wig=load_wig(all_wig_file[ww],resolution*1000,chrName,chrTotSize,chrstart,chrend)\n\n\n            chrBedWig=m_wig[which(chrBedMatrix[,1]==1),]\n            chrBedWig[,2]=chrBedWig[,2]*resolution*1000\n            m_wig[,2]=m_wig[,2]*resolution*1000\n\n            m_wig_ttest=NULL\n            if((length(chrBedWig))>0)\n            {\n              for(iii in 1:(dim(chrBedWig)[1]))\n              {\n                m_wig_ttest=rbind(m_wig_ttest,t.test(m_wig[,3],mu=chrBedWig[iii,3]))\n              }\n              m_wig_equal=which(m_wig_ttest[,3]>0.05)\n              m_wig_mean=mean(m_wig[,3])\n              m_wig_nequal=which(m_wig_ttest[,3]<=0.05)\n              m_wig_more=m_wig_nequal[which(chrBedWig[m_wig_nequal[],3]>m_wig_mean)]\n              m_wig_less=m_wig_nequal[which(chrBedWig[m_wig_nequal[],3]<=m_wig_mean)]\n              m_wig_bed=chrBedWig\n              m_wig_bed[,3]=0\n              m_wig_bed[m_wig_more,3]=1\n              m_wig_bed[m_wig_less,3]=-1\n\n              if(is.null(all_bed_wig_hm))\n              {\n                all_bed_wig_hm=m_wig_bed\n              }else\n              {\n                all_bed_wig_hm=cbind(all_bed_wig_hm,m_wig_bed[,3])\n              }\n              if(is.null(all_wig_hm))\n              {\n                all_wig_hm=m_wig\n                all_wig_hm[,3]=(all_wig_hm[,3]-range(all_wig_hm[,3])[1])/(range(all_wig_hm[,3])[2]-range(all_wig_hm[,3])[1])\n                tmpname=colnames(all_wig_hm)\n                colnames(all_wig_hm)=c(tmpname[1:2],all_wig_name[ww])\n              }else\n              {\n                tmpname=colnames(all_wig_hm)\n                all_wig_hm=cbind(all_wig_hm,((m_wig[,3]-range(m_wig[,3])[1])/(range(m_wig[,3])[2]-range(m_wig[,3])[1])))\n                colnames(all_wig_hm)=c(tmpname,all_wig_name[ww])\n\n              }\n\n            }\n          }\n        }\n\n\n        circos(R=360, cir=chrCircosDb, W=circosTrackWidth, mapping=all_wig_hm,  col.v=3,  type=\"heatmap2\",  col.bar=TRUE, lwd=0.1, col=\"blue\")\n        circos(R=(360+circosTrackWidth), cir=chrCircosDb, W=1,   type=\"chr\", print.chr.lab=FALSE, scale=TRUE)\n        text(730,820,\"track name Outside-to-inside\",cex=0.55,family=\"mono\")\n        for(namei in 1:all_wig_num)\n        {\n          text(740,820-namei*20,all_wig_name[namei],cex=0.55,family=\"mono\")\n        }\n        dev.off() # text(400,820,family=\"mono\",wigFile3,cex=0.7)\n        print(paste(chrName,\" circos plot finish\",sep = \"\"))\n\n\n        rm(chrCmap)\n        rm(chrBed)\n        rm(chrBedBin)\n        rm(chrBedMatrix)\n        rm(chrCircosMapping)\n        gc()\n      }\n    }\n  }else\n  {\n    for (i in 1:chrNum)\n    {\n\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      if(chrName==chrom)\n      {\n        chrBed=choose_chr_bed(m_bed,chrName)\n        if(chrend>0)\n        {\n          chrBed=chrBed[which(chrBed[,3]<chrend),]\n          chrBed[,2]=chrBed[,2]-chrstart\n          chrBed[,3]=chrBed[,3]-chrstart\n          chrBed=chrBed[which(chrBed[,2]>0),]\n        }\n        chrBedNum=dim(chrBed)[1]\n\n\n        if(chrBedNum>0)\n        {\n          chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n\n          chrTotSize=dim(chrCmap)[1]\n          if(chrend>0)\n          {\n            tmpCmapStart=abs(ceiling((chrstart/(resolution*1000))))\n            tmpCmapEnd=abs(ceiling((chrend/(resolution*1000))))\n            if(tmpCmapEnd<tmpCmapStart)\n            {\n              print(\"please input correct start and end number\")\n              break\n            }\n            if(tmpCmapEnd>chrTotSize)\n            {\n              tmpCmapEnd=chrTotSize\n            }\n            if(tmpCmapStart>chrTotSize)\n            {\n              tmpCmapStart=chrTotSize\n            }\n            chrCmap=chrCmap[tmpCmapStart:tmpCmapEnd,tmpCmapStart:tmpCmapEnd]\n            chrTotSize=dim(chrCmap)[1]\n          }\n\n\n\n          print(paste(\"plot \",chrName,\"circos picture\",sep=\"\"))\n\n\n\n\n\n          tmpNum2=regexpr(\"r\",chrName)\n          chrNo=substr(chrName,tmpNum2+1,nchar(chrName))\n          #chrNo=as.numeric(chrNo)\n          chrBedBin=check_bed_bin(chrBed,resolution*1000)\n          chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n\n\n\n          chrCircosMapping=calculate_omiccircos_data(chrCmap,chrBedMatrix,chrBedBin,chrBed,chrName,chrCmap,if_threshold)\n          chrCircosMapping[,1]=chrNo\n          chrCircosMapping[,4]=chrNo\n          chrCircosDb=segAnglePo(genomeFrame, seg=chrName)\n          seg.num<-length(unique(genomeFrame[,1]))\n\n\n          if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n          {\n            pdf(paste(matrix_dir,\"/\",chrName,\"_circos.pdf\",sep=\"\"),width = 8,height = 8)\n\n          }else\n          {\n            jpeg(paste(matrix_dir,\"/\",chrName,\"_circos.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n          }\n          #pdf(\"tmp_circos.pdf\",width = 8,height = 8)\n          options(stringsAsFactors = FALSE);\n\n          par(mar=c(2, 2, 2, 2));\n          plot(c(1,800), c(1,800), type=\"n\", axes=FALSE, xlab=\"\", ylab=\"\", main=\"\");\n          if(circosLinecolor==\"rainbow\")\n          {\n            colors<-rainbow(seg.num, alpha=0.5)\n            circosLinecolor=colors\n            circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping, type=\"link2\", lwd=circosLineWidth,col=colors);\n          }else if(circosLinecolor==\"ReadCounts\")\n          {\n            #colors<-c(\"#f7f4f9\",\"#f7f4f9\",\"#e7e1ef\",\"#d4b9da\",\"#c994c7\",\"#df65b0\",\"#e7298a\",\"#ce1256\",\"#980043\",\"#67001f\")\n            colors<-c(\"#fff7f3\",\"#fff7f3\",\"#fde0dd\",\"#fcc5c0\",\"#fa9fb5\",\"#f768a1\",\"#dd3497\",\"#b0017e\",\"#7a0177\",\"#49006a\")\n            #colors<-c(\"#fff7fb\",\"#fff7fb\",\"#ece7f2\",\"#d0d1e6\",\"#a6bddb\",\"#74a9cf\",\"#3690c0\",\"#0570b0\",\"#045a8d\",\"#023858\")\n            #colors<-c(\"#ffffcc\",\"#ffffcc\",\"#ffeda0\",\"#fed976\",\"#feb24c\",\"#fd8d3c\",\"#fc4e2a\",\"#e31a1c\",\"#bd0026\",\"#b00026\")\n            #colors<-c(\"#f7fbff\",\"#f7fbff\",\"#deebf7\",\"#c6dbef\",\"#9ecae1\",\"#6baed6\",\"#4292c6\",\"#2171b5\",\"#08519c\",\"#08306b\")\n            chrCircosMapping[,7]=as.numeric(chrCircosMapping[,7])\n            chrCircosMapping<-chrCircosMapping[with(chrCircosMapping, order(read_count,decreasing = FALSE)), ]\n            ccm_dim=dim(chrCircosMapping)[1]\n            for(ccm in 1:10)\n            {\n              ccm_start=1+ceiling((ccm_dim/10)*(ccm-1))\n              ccm_end=ceiling((ccm_dim/10)*ccm)\n              circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping[ccm_start:ccm_end,], type=\"link2\", lwd=circosLineWidth*ccm,col=colors[ccm]);\n            }\n          }else\n          {\n            circos(R=340, cir=chrCircosDb, W=40,  mapping=chrCircosMapping, type=\"link2\", lwd=circosLineWidth,col=circosLinecolor);\n          }\n\n          all_wig_hm=NULL\n          all_bed_wig_hm=NULL\n          print(paste(\"plot \",chrName,\"circos picture\",sep=\"\"))\n\n          if(all_wig_num>0)\n          {\n            for(ww in 1:all_wig_num)\n            {\n              m_wig=load_wig(all_wig_file[ww],resolution*1000,chrName,chrTotSize,chrstart,chrend)\n\n\n              chrBedWig=m_wig[which(chrBedMatrix[,1]==1),]\n              chrBedWig[,2]=chrBedWig[,2]*resolution*1000\n              m_wig[,2]=m_wig[,2]*resolution*1000\n\n              m_wig_ttest=NULL\n              if((length(chrBedWig))>0)\n              {\n                for(iii in 1:(dim(chrBedWig)[1]))\n                {\n                  m_wig_ttest=rbind(m_wig_ttest,t.test(m_wig[,3],mu=chrBedWig[iii,3]))\n                }\n                m_wig_equal=which(m_wig_ttest[,3]>0.05)\n                m_wig_mean=mean(m_wig[,3])\n                m_wig_nequal=which(m_wig_ttest[,3]<=0.05)\n                m_wig_more=m_wig_nequal[which(chrBedWig[m_wig_nequal[],3]>m_wig_mean)]\n                m_wig_less=m_wig_nequal[which(chrBedWig[m_wig_nequal[],3]<=m_wig_mean)]\n                m_wig_bed=chrBedWig\n                m_wig_bed[,3]=0\n                m_wig_bed[m_wig_more,3]=1\n                m_wig_bed[m_wig_less,3]=-1\n\n                if(is.null(all_bed_wig_hm))\n                {\n                  all_bed_wig_hm=m_wig_bed\n                }else\n                {\n                  all_bed_wig_hm=cbind(all_bed_wig_hm,m_wig_bed[,3])\n                }\n                if(is.null(all_wig_hm))\n                {\n                  all_wig_hm=m_wig\n                  all_wig_hm[,3]=(all_wig_hm[,3]-range(all_wig_hm[,3])[1])/(range(all_wig_hm[,3])[2]-range(all_wig_hm[,3])[1])\n                  tmpname=colnames(all_wig_hm)\n                  colnames(all_wig_hm)=c(tmpname[1:2],all_wig_name[ww])\n                }else\n                {\n                  tmpname=colnames(all_wig_hm)\n                  all_wig_hm=cbind(all_wig_hm,((m_wig[,3]-range(m_wig[,3])[1])/(range(m_wig[,3])[2]-range(m_wig[,3])[1])))\n                  colnames(all_wig_hm)=c(tmpname,all_wig_name[ww])\n\n                }\n\n              }\n            }\n          }\n\n\n          circos(R=360, cir=chrCircosDb, W=circosTrackWidth, mapping=all_wig_hm,  col.v=3,  type=\"heatmap2\",  col.bar=TRUE, lwd=0.1, col=\"blue\")\n          circos(R=(360+circosTrackWidth), cir=chrCircosDb, W=1,   type=\"chr\", print.chr.lab=FALSE, scale=TRUE)\n          text(730,820,\"track name Outside-to-inside\",cex=0.55,family=\"mono\")\n          for(namei in 1:all_wig_num)\n          {\n            text(740,820-namei*20,all_wig_name[namei],cex=0.55,family=\"mono\")\n          }\n          dev.off() # text(400,820,family=\"mono\",wigFile3,cex=0.7)\n          print(paste(chrName,\" circos plot finish\",sep = \"\"))\n\n\n          rm(chrCmap)\n          rm(chrBed)\n          rm(chrBedBin)\n          rm(chrBedMatrix)\n          rm(chrCircosMapping)\n          gc()\n        }\n      }\n    }\n  }\n}\n\nstatistical_analysis<-function(bedFile,wig_dir=\"wig\",bedWindow=0,matrix_dir=\"hg19\",outputpdf=TRUE,chrom=\"all\",chrstart=0,chrend=0,resolution=100,groupNum=100,dist_method=\"euclidean\",clust_method=\"complete\",clust_label=TRUE,clust_k=5,threshold=0,hm_trace=TRUE)\n{\n  #source(\"calbed.R\")\n  matrix_name_dir=list.files(path=matrix_dir,full.names=F,pattern=\".matrix\")\n  matrix_full_dir=list.files(path=matrix_dir,full.names=T,pattern=\".matrix\")\n  m_bed=load_bed(bedFile)\n  chrNum=length(matrix_name_dir)\n  all_wig_file=list.files(path=wig_dir,full.names=T,pattern=\".wig\")\n  all_wig_name=list.files(path=wig_dir,full.names = FALSE,pattern = \".wig\")\n  all_wig_num=length(all_wig_file)\n\n  if(chrom==\"all\")\n  {\n    for (i in 1:chrNum)\n    {\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      chrBed=choose_chr_bed(m_bed,chrName)\n      chrBedNum=dim(chrBed)[1]\n      print(matrix_full_dir[i])\n      if(chrBedNum>0)\n      {\n        print(chrName)\n        chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n        chrTotSize=dim(chrCmap)[1]\n        chrBedBin=check_bed_bin(chrBed,resolution*1000)\n        chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n\n        logfile = paste(paste(matrix_dir,\"/\",chrName,\"_statistic.txt\",sep=\"\"))\n        if (file.exists(logfile) ==TRUE){file.remove(logfile)}\n        starttime = paste(\"Analysis start time:\" , as.character(Sys.time()))\n        write(starttime,file=logfile,append=TRUE)\n        print(starttime)\n\n\n\n        if(all_wig_num>0)\n        {\n          clust_wig=NULL\n          all_wig_info=NULL\n          all_wig_info_loc=matrix(data = 0,nrow = all_wig_num,ncol = 2)\n          print(paste(Sys.time(),\" start make clusters\"))\n\n          for(ww in 1:all_wig_num)\n          {\n            chrBedWig=load_bed_wig(all_wig_file[ww],chrBed,chrName,0,0,0)\n            clust_wig=cbind(clust_wig,chrBedWig[,4])\n            if(is.null(all_wig_info))\n            {\n              wig_info_start=1\n            }else\n            {\n              wig_info_start=dim(all_wig_info)[1]+1\n            }\n            one_wig_info=load_all_wig(all_wig_file[ww])\n            one_wig_info=one_wig_info[one_wig_info$chr==chrName,]\n            one_wig_info[,2]=as.numeric(one_wig_info[,2])\n            one_wig_info[,3]=as.numeric(one_wig_info[,3])\n            one_wig_info[,4]=as.numeric(one_wig_info[,4])\n            if(chrend>0)\n            {\n              one_wig_info=one_wig_info[which(one_wig_info[,3]<chrend),]\n            }\n            if(chrstart>0)\n            {\n              one_wig_info[,2]=one_wig_info[,2]-chrstart\n              one_wig_info[,3]=one_wig_info[,3]-chrstart\n              one_wig_info=one_wig_info[which(one_wig_info[,2]>=0),]\n            }\n            wig_info_end=wig_info_start+dim(one_wig_info)[1]-1\n            all_wig_info_loc[ww,1]=wig_info_start\n            all_wig_info_loc[ww,2]=wig_info_end\n            all_wig_info=rbind(all_wig_info,one_wig_info)\n          }\n          if((is.null(clust_wig))==FALSE)\n          {\n            for(cii in 1:all_wig_num)\n            {\n              clust_wig[is.na(clust_wig[,cii]),cii]=0\n              clust_wig[is.nan(clust_wig[,cii]),cii]=0\n            }\n          }\n\n\n\n          if((is.null(clust_wig))==FALSE)\n          {\n            tt=c(1:(dim(clust_wig)[1]))\n            clust_name=paste(tt,\"_\",chrBed[,1],\":\",(chrBed[,2]+chrstart),\"-\",(chrBed[,3]+chrstart),sep = \"\")\n            row.names(clust_wig)=clust_name\n\n            colnames(clust_wig)=all_wig_name\n            mydata=clust_wig\n\n            for(cii in 1:all_wig_num)\n            {\n              mydata[is.na(mydata[,cii]),cii]=0\n              mydata[is.nan(mydata[,cii]),cii]=0\n\n\n            }\n\n\n            suppressPackageStartupMessages(library(\"lattice\"))\n            suppressPackageStartupMessages(library(\"flexclust\"))\n            if(all_wig_num>1)\n            {\n              bcl <- bootFlexclust(mydata, k=2:7, nboot=50, FUN=cclust, multicore=FALSE)\n              if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n              {\n                pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_k_density.pdf\",sep=\"\"),width = 8,height = 8)\n\n              }else\n              {\n                jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_k_density.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n              }\n              plot(bcl)\n              densityplot(bcl, from=0)\n\n              dev.off()\n            }\n\n            out.dist=dist(mydata,method=dist_method) #manhattan,euclidean,minkowski,chebyshev,mahalanobis,canberra\n            out.hclust=hclust(out.dist,method=clust_method) #average,centroid,median,complete,single,ward.D,density\n            if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n            {\n              pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_tree.pdf\",sep=\"\"),width = 8,height = 8)\n\n            }else\n            {\n              jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_tree.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n            }\n\n            if((clust_label==TRUE)||(clust_label==\"TRUE\")||(clust_label==\"true\"))\n            {\n              plot(out.hclust)\n\n            }else\n            {\n              ll_length=length(out.hclust$labels)\n              tmp_label=out.hclust\n              for(lli in 1:ll_length)\n              {\n                tmp_label$labels[lli]=\"\"\n              }\n\n              plot(tmp_label)\n              cc_list=rect.hclust(tmp_label,clust_k)\n\n            }\n\n            cc_list=rect.hclust(out.hclust,clust_k)\n            cluster.id=cutree(out.hclust,clust_k)\n            dev.off()\n            row.names(chrBed)=clust_name\n            m_ttest_result=NULL\n            for(ww in 1:all_wig_num)\n            {\n              tmp_ttest_result=data.frame(\"wig1_pvalue\"=numeric(dim(clust_wig)[1]),\"wig1_difference\"=character(dim(clust_wig)[1]),stringsAsFactors=FALSE)\n              tmp_wig_ttest=NULL\n              write(\"\",file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n\n              for(iii in 1:(dim(clust_wig)[1]))\n              {\n                if(is.na(clust_wig[iii,ww])==FALSE)\n                {\n                  tmp_wig_ttest=rbind(tmp_wig_ttest,t.test(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4],mu=clust_wig[iii,ww]))\n                }else\n                {\n                  tmp_wig_ttest=rbind(tmp_wig_ttest,t.test(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4],mu=0))\n                }\n              }\n              m_wig_equal=which(tmp_wig_ttest[,3]>0.05)\n              m_wig_mean=mean(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4])\n              m_wig_nequal=which(tmp_wig_ttest[,3]<=0.05)\n              m_wig_more=m_wig_nequal[which(clust_wig[m_wig_nequal[],ww]>m_wig_mean)]\n              m_wig_less=m_wig_nequal[which(clust_wig[m_wig_nequal[],ww]<=m_wig_mean)]\n              tmp_ttest_result[,1]=as.data.frame(as.matrix(tmp_wig_ttest[,3]))\n              tmp_ttest_result[,1]=as.numeric(tmp_ttest_result[,1])\n              tmp_ttest_result[m_wig_more[],2]=\"more\"\n              tmp_ttest_result[m_wig_less[],2]=\"less\"\n              tmp_ttest_result[m_wig_equal[],2]=\"equal\"\n              if(is.null(m_ttest_result))\n              {\n                m_ttest_result=tmp_ttest_result\n              }else\n              {\n                m_ttest_result=cbind(m_ttest_result,tmp_ttest_result)\n\n              }\n              wig_test=rbind(cbind(na.omit(clust_wig[,ww]),1),cbind(na.omit(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4]),2))\n              bed_wig_mean=mean(na.omit(clust_wig[,ww]))\n              all_wig_mean=mean(na.omit(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4]))\n              wig_test=as.data.frame(wig_test)\n              colnames(wig_test)=c(\"wig_value\",\"group\")\n              rownames(wig_test)=c(1:(dim(wig_test)[1]))\n              wig_test$group=as.factor(wig_test$group)\n              wig_kruskal=kruskal.test(wig_value~group, data=wig_test)\n              wig_kruskalmc=kruskalmc(wig_value~group, data=wig_test, probs=0.05)\n              wig_mult <- oneway_test(wig_value~group, data=wig_test,\n                                      ytrafo = function(data) trafo(data, numeric_trafo = rank),\n                                      xtrafo = function(data) trafo(data, factor_trafo = function(x)\n                                        model.matrix(~x - 1) %*% t(contrMat(table(x), \"Tukey\"))),\n                                      teststat = \"max\", distribution = approximate(B = 90000))\n              wig_pvalue=pvalue(wig_mult, method = \"single-step\")\n              write(paste(\"the statistic test between BED WIG and  WIG : \",all_wig_name[ww],sep=\"\"),file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n              write(\"test name : Kruskal-Wallis rank sum test\",file=logfile,append=TRUE)\n              write(paste(\"Kruskal-Wallis chi-squared : \",wig_kruskal$statistic,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"Kruskal-Wallis df : \",wig_kruskal$parameter,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"Kruskal-Wallis p value : \",wig_kruskal$p.value,sep = \"\"),file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n              write(\"test name : Multiple comparison test after Kruskal-Wallis\",file=logfile,append=TRUE)\n              write(paste(\"significance level : \",wig_kruskalmc$signif.level,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"observed difference  : \",wig_kruskalmc$dif.com$obs.dif,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"critical difference  : \",wig_kruskalmc$dif.com$critical.dif,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"exist difference  : \",wig_kruskalmc$dif.com$difference,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"BED WIG mean  : \",bed_wig_mean,sep = \"\"),file=logfile,append=TRUE)\n              write(paste(\"ALL WIG mean  : \",all_wig_mean,sep = \"\"),file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n              write(\"\",file=logfile,append=TRUE)\n            }\n\n            tt_name=NULL\n            for(ww in 1:all_wig_num)\n            {\n              tt_name=c(tt_name,paste(all_wig_name[ww],\"_pvalue\",sep = \"\"),paste(all_wig_name[ww],\"_difference\",sep=\"\"))\n            }\n            colnames(m_ttest_result)=tt_name\n            clust_group=cbind(na.omit(cbind(chrBed,clust_wig,m_ttest_result)),cluster.id)\n\n            write.csv(clust_group,paste(matrix_dir,\"/\",chrName,\"_cluster.csv\",sep=\"\"),row.names = FALSE)\n            clust_heatmap=NULL\n\n\n            clust_order_num=NULL\n            tmp_order_num=0\n\n            for(ii in 1:clust_k)\n            {\n              clust_order_num=rbind(clust_order_num,length(cc_list[[ii]]))\n            }\n            clust_order_num2=clust_order_num\n            for(ii in 1:clust_k)\n            {\n              clust_order_num[ii]=sum(clust_order_num2[1:ii,])\n            }\n            clust_order_num[clust_k]=clust_order_num[clust_k]+1\n\n            for( ii in 1:clust_k)\n            {\n              clust_heatmap=rbind(clust_heatmap,clust_group[which(clust_group[,\"cluster.id\"]==ii),])\n\n            }\n\n            rownames(clust_heatmap)=NULL\n            print(paste(Sys.time(),\" print cluster heatmap\"))\n\n            if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n            {\n              pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_heatmap.pdf\",sep=\"\"),width = 8,height = 8)\n\n            }else\n            {\n              jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_heatmap.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n            }\n            hm_data=as.matrix(clust_group[,5:(5+all_wig_num-1)])\n            # for(hmi in 1:dim(hm_data)[2])\n            #{\n            #   hm_data[,hmi]=((hm_data[,hmi]-range(hm_data[,hmi])[1])/(range(hm_data[,hmi])[2]-range(hm_data[,hmi])[1])-0.5)*2\n            #\n            # }\n            for(hmi in 1:dim(hm_data)[2])\n            {\n              hm_data[,hmi]=(hm_data[,hmi]-range(hm_data[,hmi])[1])/(range(hm_data[,hmi])[2]-range(hm_data[,hmi])[1])\n\n            }\n            clust_col_num=c(1:dim(hm_data)[2])\n\n            if(hm_trace==TRUE)\n            {\n              heatmap.2(hm_data[out.hclust$order,],rowsep = clust_order_num,sepcolor=\"black\",sepwidth = c(0.1,0.1),srtCol = 25,adjCol = c(0.6,0.8),cexCol = 0.7,col=whitered,dendrogram = \"none\",Rowv=FALSE,Colv=FALSE,adjRow = c(-500,-500),\n                        breaks=256,\n                        key.title=NA,\n                        key.xlab=NA,\n                        key.par=list(mgp=c(1.5, 0.5, 0),\n                                     mar=c(1, 2.5, 1, 0)),\n                        key.xtickfun=function() {\n                          cex <- par(\"cex\")*par(\"cex.axis\")\n                          side <- 1\n                          line <- 0\n                          col <- par(\"col.axis\")\n                          font <- par(\"font.axis\")\n                          mtext(\"low\", side=side, at=0, adj=0,\n                                line=line, cex=cex, col=col, font=font)\n                          mtext(\"high\", side=side, at=1, adj=1,\n                                line=line, cex=cex, col=col, font=font)\n                          return(list(labels=FALSE, tick=FALSE))\n                        })\n            }else\n            {\n              heatmap.2(hm_data[out.hclust$order,],rowsep = clust_order_num,sepcolor=\"black\",sepwidth = c(0.1,0.1),srtCol = 25,adjCol = c(0.6,0.8),cexCol = 0.7,col=whitered,dendrogram = \"none\",Rowv=FALSE,Colv=FALSE,adjRow = c(-500,-500),\n                        breaks=256,\n                        trace = \"none\",\n                        key.title=NA,\n                        key.xlab=NA,\n                        key.par=list(mgp=c(1.5, 0.5, 0),\n                                     mar=c(1, 2.5, 1, 0)),\n                        key.xtickfun=function() {\n                          cex <- par(\"cex\")*par(\"cex.axis\")\n                          side <- 1\n                          line <- 0\n                          col <- par(\"col.axis\")\n                          font <- par(\"font.axis\")\n                          mtext(\"low\", side=side, at=0, adj=0,\n                                line=line, cex=cex, col=col, font=font)\n                          mtext(\"high\", side=side, at=1, adj=1,\n                                line=line, cex=cex, col=col, font=font)\n                          return(list(labels=FALSE, tick=FALSE))\n                        })\n            }\n\n            #heatmap(as.matrix(clust_heatmap[,5:(5+all_wig_num-1)]),Rowv=NA,Colv=NA,cexCol = 1,labCol = \"\")\n            dev.off()\n\n          }\n        }\n\n\n\n        n_count=0\n        for (ii in 1:chrTotSize)\n        {\n          if(chrBedMatrix[ii]!=0)\n          {\n            n_count=n_count+1\n          }\n        }\n        random_group=matrix(data=0, nrow = groupNum, ncol = chrTotSize)\n        random_result=matrix(data=0, nrow = groupNum , ncol = 3)\n\n        for (ii in 1:groupNum)\n        {\n          tmp_site=sample(1:chrTotSize,size=n_count)\n          random_group[ii,tmp_site]= 2\n        }\n\n        tmpCmap=chrCmap\n        tmpCmap[lower.tri(tmpCmap)]=NA\n\n        for(t in 1:groupNum)\n        {\n\n          random_result[t,1]=0\n          random_result[t,2]=0\n          for(ii in 1:chrTotSize)\n          {\n            if(random_group[t,ii]>0)\n            {\n              b=which(tmpCmap[ii,]>0)\n              c=which((random_group[t,b])>0)\n              random_result[t,1]=random_result[t,1]+length(c)\n              random_result[t,2]=random_result[t,2]+length(b)\n            }\n          }\n\n        }\n\n        bed_count=0\n        all_count=0\n        bb_count=0\n        bb_info=NULL\n        bedTOall_info=NULL\n\n        for(ii in 1:chrTotSize)\n        {\n          if(chrBedMatrix[ii]>0)\n          {\n            b=which(tmpCmap[ii,]>0)\n            c=which((chrBedMatrix[b])>0)\n            if(length(b)>0)\n            {\n              bedTOall_info=rbind(bedTOall_info,cbind(ii,b,t(tmpCmap[ii,b])))\n            }\n            if(length(c)>0)\n            {\n              bb_info=rbind(bb_info,cbind(ii,b[c],t(tmpCmap[ii,b[c]])))\n            }\n            bb_count=bb_count+length(c)\n            bed_count=bed_count+length(b)\n          }\n        }\n\n\n\n        if_test=rbind(cbind(bb_info[,3],1),cbind(bedTOall_info[,3],2))\n        if_test=as.data.frame(if_test)\n        colnames(if_test)=c(\"if_value\",\"group\")\n        rownames(if_test)=c(1:(dim(if_test)[1]))\n        if_test$group=as.factor(if_test$group)\n        if_kruskal=kruskal.test(if_value~group, data=if_test)\n        if_kruskalmc=kruskalmc(if_value~group, data=if_test, probs=0.05)\n        mult <- oneway_test(if_value~group, data=if_test,\n                            ytrafo = function(data) trafo(data, numeric_trafo = rank),\n                            xtrafo = function(data) trafo(data, factor_trafo = function(x)\n                              model.matrix(~x - 1) %*% t(contrMat(table(x), \"Tukey\"))),\n                            teststat = \"max\", distribution = approximate(B = 90000))\n        if_pvalue=pvalue(mult, method = \"single-step\")\n\n\n        dif_result=t.test(random_result[,1],mu=bb_count)\n\n\n\n        write(\"\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"the statistic test of interaction frequency between b2b and b2o :\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"test name : Kruskal-Wallis rank sum test\",file=logfile,append=TRUE)\n        write(paste(\"Kruskal-Wallis chi-squared : \",if_kruskal$statistic,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"Kruskal-Wallis df : \",if_kruskal$parameter,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"Kruskal-Wallis p value : \",if_kruskal$p.value,sep = \"\"),file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"test name : Multiple comparison test after Kruskal-Wallis\",file=logfile,append=TRUE)\n        write(paste(\"significance level : \",if_kruskalmc$signif.level,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"observed difference  : \",if_kruskalmc$dif.com$obs.dif,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"critical difference  : \",if_kruskalmc$dif.com$critical.dif,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"exist difference  : \",if_kruskalmc$dif.com$difference,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"b2b frequency mean  : \",mean(bb_info[,3]),sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"b2o frequency mean  : \",mean(bedTOall_info[,3]),sep = \"\"),file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"the statistic test of interaction number between b2b and o2o :\",file=logfile,append=TRUE)\n        write(\"\",file=logfile,append=TRUE)\n        write(\"test name : t-test\",file=logfile,append=TRUE)\n        write(paste(\"numbers of random group : \",groupNum,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"95 percent confidence interval of random group : \",dif_result$conf.int[1],\" ~ \",dif_result$conf.int[2],sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"numbers of b2b : \",bb_count,sep = \"\"),file=logfile,append=TRUE)\n        write(paste(\"t test p value : \",dif_result$p.value,sep = \"\"),file=logfile,append=TRUE)\n        if(dif_result$p.value<0.05)\n        {\n          write(\"exist difference  : TRUE\",file=logfile,append=TRUE)\n\n        }else\n        {\n          write(\"exist difference  : FALSE\",file=logfile,append=TRUE)\n\n        }\n      }\n    }\n  }else\n  {\n    for (i in 1:chrNum)\n    {\n      tmpNum=regexpr(\".matrix\",matrix_name_dir[i])\n      chrName=substr(matrix_name_dir[i],1,tmpNum-1)\n      if(chrName==chrom)\n      {\n        chrBed=choose_chr_bed(m_bed,chrName)\n        if(chrend>0)\n        {\n          chrBed=chrBed[which(chrBed[,3]<chrend),]\n          chrBed[,2]=chrBed[,2]-chrstart\n          chrBed[,3]=chrBed[,3]-chrstart\n          chrBed=chrBed[which(chrBed[,2]>0),]\n        }\n        chrBedNum=dim(chrBed)[1]\n        print(matrix_full_dir[i])\n        if(chrBedNum>0)\n        {\n          print(chrName)\n          chrCmap=read.table(file=matrix_full_dir[i], fill=TRUE, stringsAsFactors=FALSE)\n          chrTotSize=dim(chrCmap)[1]\n\n          if(chrend>0)\n          {\n            tmpCmapStart=abs(ceiling((chrstart/(resolution*1000))))\n            tmpCmapEnd=abs(ceiling((chrend/(resolution*1000))))\n            if(tmpCmapEnd<tmpCmapStart)\n            {\n              print(\"please input correct start and end number\")\n              break\n            }\n            if(tmpCmapEnd>chrTotSize)\n            {\n              tmpCmapEnd=chrTotSize\n            }\n            if(tmpCmapStart>chrTotSize)\n            {\n              tmpCmapStart=chrTotSize\n            }\n            chrCmap=chrCmap[tmpCmapStart:tmpCmapEnd,tmpCmapStart:tmpCmapEnd]\n            chrTotSize=dim(chrCmap)[1]\n          }\n\n\n\n          chrBedBin=check_bed_bin(chrBed,resolution*1000)\n          chrBedMatrix=convert_bed_to_matrix(chrBed,resolution*1000,chrName,chrTotSize,bedWindow)\n\n\n\n\n          logfile = paste(paste(matrix_dir,\"/\",chrName,\"_statistic.txt\",sep=\"\"))\n          if (file.exists(logfile) ==TRUE){file.remove(logfile)}\n          starttime = paste(\"Analysis start time:\" , as.character(Sys.time()))\n          write(starttime,file=logfile,append=TRUE)\n\n          print(starttime)\n          if(all_wig_num>0)\n          {\n            clust_wig=NULL\n            all_wig_info=NULL\n            all_wig_info_loc=matrix(data = 0,nrow = all_wig_num,ncol = 2)\n            print(paste(Sys.time(),\" start make clusters\"))\n\n            for(ww in 1:all_wig_num)\n            {\n              chrBedWig=load_bed_wig(all_wig_file[ww],chrBed,chrName,chrstart,chrend,0)\n              clust_wig=cbind(clust_wig,chrBedWig[,4])\n              if(is.null(all_wig_info))\n              {\n                wig_info_start=1\n              }else\n              {\n                wig_info_start=dim(all_wig_info)[1]+1\n              }\n              one_wig_info=load_all_wig(all_wig_file[ww])\n              one_wig_info=one_wig_info[one_wig_info$chr==chrom,]\n              one_wig_info[,2]=as.numeric(one_wig_info[,2])\n              one_wig_info[,3]=as.numeric(one_wig_info[,3])\n              one_wig_info[,4]=as.numeric(one_wig_info[,4])\n              if(chrend>0)\n              {\n                one_wig_info=one_wig_info[which(one_wig_info[,3]<chrend),]\n              }\n              if(chrstart>0)\n              {\n                one_wig_info[,2]=one_wig_info[,2]-chrstart\n                one_wig_info[,3]=one_wig_info[,3]-chrstart\n                one_wig_info=one_wig_info[which(one_wig_info[,2]>=0),]\n              }\n              wig_info_end=wig_info_start+dim(one_wig_info)[1]-1\n              all_wig_info_loc[ww,1]=wig_info_start\n              all_wig_info_loc[ww,2]=wig_info_end\n              all_wig_info=rbind(all_wig_info,one_wig_info)\n            }\n\n            if((is.null(clust_wig))==FALSE)\n            {\n              for(cii in 1:all_wig_num)\n              {\n                clust_wig[is.na(clust_wig[,cii]),cii]=0\n                clust_wig[is.nan(clust_wig[,cii]),cii]=0\n              }\n            }\n\n\n\n            if((is.null(clust_wig))==FALSE)\n            {\n              tt=c(1:(dim(clust_wig)[1]))\n              clust_name=paste(tt,\"_\",chrBed[,1],\":\",(chrBed[,2]+chrstart),\"-\",(chrBed[,3]+chrstart),sep = \"\")\n              row.names(clust_wig)=clust_name\n\n              colnames(clust_wig)=all_wig_name\n              mydata=clust_wig\n\n              for(cii in 1:all_wig_num)\n              {\n                mydata[is.na(mydata[,cii]),cii]=0\n                mydata[is.nan(mydata[,cii]),cii]=0\n\n\n              }\n\n\n\n              suppressPackageStartupMessages(library(\"lattice\"))\n              suppressPackageStartupMessages(library(\"flexclust\"))\n              if(all_wig_num>1)\n              {\n                bcl <- bootFlexclust(mydata, k=2:7, nboot=50, FUN=cclust, multicore=FALSE)\n                if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n                {\n                  pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_k_density.pdf\",sep=\"\"),width = 8,height = 8)\n\n                }else\n                {\n                  jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_k_density.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n                }\n                plot(bcl)\n                densityplot(bcl, from=0)\n\n                dev.off()\n              }\n\n              out.dist=dist(mydata,method=dist_method) #manhattan,euclidean,minkowski,chebyshev,mahalanobis,canberra\n              out.hclust=hclust(out.dist,method=clust_method) #average,centroid,median,complete,single,ward.D,density\n              if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n              {\n                pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_tree.pdf\",sep=\"\"),width = 8,height = 8)\n\n              }else\n              {\n                jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_tree.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n              }\n\n              if((clust_label==TRUE)||(clust_label==\"TRUE\")||(clust_label==\"true\"))\n              {\n                plot(out.hclust)\n\n              }else\n              {\n                ll_length=length(out.hclust$labels)\n                tmp_label=out.hclust\n                for(lli in 1:ll_length)\n                {\n                  tmp_label$labels[lli]=\"\"\n                }\n\n                plot(tmp_label)\n                cc_list=rect.hclust(tmp_label,clust_k)\n\n              }\n\n              cc_list=rect.hclust(out.hclust,clust_k)\n              cluster.id=cutree(out.hclust,clust_k)\n              dev.off()\n              row.names(chrBed)=clust_name\n              m_ttest_result=NULL\n              for(ww in 1:all_wig_num)\n              {\n                tmp_ttest_result=data.frame(\"wig1_pvalue\"=numeric(dim(clust_wig)[1]),\"wig1_difference\"=character(dim(clust_wig)[1]),stringsAsFactors=FALSE)\n                tmp_wig_ttest=NULL\n                write(\"\",file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n\n                for(iii in 1:(dim(clust_wig)[1]))\n                {\n                  if(is.na(clust_wig[iii,ww])==FALSE)\n                  {\n                    tmp_wig_ttest=rbind(tmp_wig_ttest,t.test(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4],mu=clust_wig[iii,ww]))\n                  }else\n                  {\n                    tmp_wig_ttest=rbind(tmp_wig_ttest,t.test(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4],mu=0))\n                  }\n                }\n                m_wig_equal=which(tmp_wig_ttest[,3]>0.05)\n                m_wig_mean=mean(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4])\n                m_wig_nequal=which(tmp_wig_ttest[,3]<=0.05)\n                m_wig_more=m_wig_nequal[which(clust_wig[m_wig_nequal[],ww]>m_wig_mean)]\n                m_wig_less=m_wig_nequal[which(clust_wig[m_wig_nequal[],ww]<=m_wig_mean)]\n                tmp_ttest_result[,1]=as.data.frame(as.matrix(tmp_wig_ttest[,3]))\n                tmp_ttest_result[,1]=as.numeric(tmp_ttest_result[,1])\n                tmp_ttest_result[m_wig_more[],2]=\"more\"\n                tmp_ttest_result[m_wig_less[],2]=\"less\"\n                tmp_ttest_result[m_wig_equal[],2]=\"equal\"\n                if(is.null(m_ttest_result))\n                {\n                  m_ttest_result=tmp_ttest_result\n                }else\n                {\n                  m_ttest_result=cbind(m_ttest_result,tmp_ttest_result)\n\n                }\n                wig_test=rbind(cbind(na.omit(clust_wig[,ww]),1),cbind(na.omit(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4]),2))\n                bed_wig_mean=mean(na.omit(clust_wig[,ww]))\n                all_wig_mean=mean(na.omit(all_wig_info[(all_wig_info_loc[ww,1]:all_wig_info_loc[ww,2]),4]))\n                wig_test=as.data.frame(wig_test)\n                colnames(wig_test)=c(\"wig_value\",\"group\")\n                rownames(wig_test)=c(1:(dim(wig_test)[1]))\n                wig_test$group=as.factor(wig_test$group)\n                wig_kruskal=kruskal.test(wig_value~group, data=wig_test)\n                wig_kruskalmc=kruskalmc(wig_value~group, data=wig_test, probs=0.05)\n                wig_mult <- oneway_test(wig_value~group, data=wig_test,\n                                        ytrafo = function(data) trafo(data, numeric_trafo = rank),\n                                        xtrafo = function(data) trafo(data, factor_trafo = function(x)\n                                          model.matrix(~x - 1) %*% t(contrMat(table(x), \"Tukey\"))),\n                                        teststat = \"max\", distribution = approximate(B = 90000))\n                wig_pvalue=pvalue(wig_mult, method = \"single-step\")\n                write(paste(\"the statistic test between BED WIG and  WIG : \",all_wig_name[ww],sep=\"\"),file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n                write(\"test name : Kruskal-Wallis rank sum test\",file=logfile,append=TRUE)\n                write(paste(\"Kruskal-Wallis chi-squared : \",wig_kruskal$statistic,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"Kruskal-Wallis df : \",wig_kruskal$parameter,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"Kruskal-Wallis p value : \",wig_kruskal$p.value,sep = \"\"),file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n                write(\"test name : Multiple comparison test after Kruskal-Wallis\",file=logfile,append=TRUE)\n                write(paste(\"significance level : \",wig_kruskalmc$signif.level,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"observed difference  : \",wig_kruskalmc$dif.com$obs.dif,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"critical difference  : \",wig_kruskalmc$dif.com$critical.dif,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"exist difference  : \",wig_kruskalmc$dif.com$difference,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"BED WIG mean  : \",bed_wig_mean,sep = \"\"),file=logfile,append=TRUE)\n                write(paste(\"ALL WIG mean  : \",all_wig_mean,sep = \"\"),file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n                write(\"\",file=logfile,append=TRUE)\n              }\n              tt_name=NULL\n              for(ww in 1:all_wig_num)\n              {\n                tt_name=c(tt_name,paste(all_wig_name[ww],\"_pvalue\",sep = \"\"),paste(all_wig_name[ww],\"_difference\",sep=\"\"))\n              }\n              colnames(m_ttest_result)=tt_name\n              clust_group=cbind(na.omit(cbind(chrBed,clust_wig,m_ttest_result)),cluster.id)\n\n              write.csv(clust_group,paste(matrix_dir,\"/\",chrName,\"_cluster.csv\",sep=\"\"),row.names = FALSE)\n              clust_heatmap=NULL\n\n\n              clust_order_num=NULL\n              tmp_order_num=0\n\n              for(ii in 1:clust_k)\n              {\n                clust_order_num=rbind(clust_order_num,length(cc_list[[ii]]))\n              }\n              clust_order_num2=clust_order_num\n              for(ii in 1:clust_k)\n              {\n                clust_order_num[ii]=sum(clust_order_num2[1:ii,])\n              }\n              clust_order_num[clust_k]=clust_order_num[clust_k]+1\n\n\n              for( ii in 1:clust_k)\n              {\n                clust_heatmap=rbind(clust_heatmap,clust_group[which(clust_group[,\"cluster.id\"]==ii),])\n\n              }\n              print(paste(Sys.time(),\" print cluster heatmap\"))\n\n              rownames(clust_heatmap)=NULL\n              if((outputpdf==TRUE)||(outputpdf==\"TRUE\")||(outputpdf==\"true\"))\n              {\n                pdf(paste(matrix_dir,\"/\",chrName,\"_cluster_heatmap.pdf\",sep=\"\"),width = 8,height = 8)\n\n              }else\n              {\n                jpeg(paste(matrix_dir,\"/\",chrName,\"_cluster_heatmap.jpeg\",sep=\"\"),width=1000,height=1000,quality = 100)\n              }\n              hm_data=as.matrix(clust_group[,5:(5+all_wig_num-1)])\n              # for(hmi in 1:dim(hm_data)[2])\n              #{\n              #   hm_data[,hmi]=((hm_data[,hmi]-range(hm_data[,hmi])[1])/(range(hm_data[,hmi])[2]-range(hm_data[,hmi])[1])-0.5)*2\n              #\n              # }\n              for(hmi in 1:dim(hm_data)[2])\n              {\n                hm_data[,hmi]=(hm_data[,hmi]-range(hm_data[,hmi])[1])/(range(hm_data[,hmi])[2]-range(hm_data[,hmi])[1])\n\n              }\n              clust_col_num=c(1:dim(hm_data)[2])\n\n\n              if(hm_trace==TRUE)\n              {\n                heatmap.2(hm_data[out.hclust$order,],rowsep = clust_order_num,sepcolor=\"black\",sepwidth = c(0.1,0.1),srtCol = 25,adjCol = c(0.6,0.8),cexCol = 0.7,col=whitered,dendrogram = \"none\",Rowv=FALSE,Colv=FALSE,adjRow = c(-500,-500),\n                          breaks=256,\n                          key.title=NA,\n                          key.xlab=NA,\n                          key.par=list(mgp=c(1.5, 0.5, 0),\n                                       mar=c(1, 2.5, 1, 0)),\n                          key.xtickfun=function() {\n                            cex <- par(\"cex\")*par(\"cex.axis\")\n                            side <- 1\n                            line <- 0\n                            col <- par(\"col.axis\")\n                            font <- par(\"font.axis\")\n                            mtext(\"low\", side=side, at=0, adj=0,\n                                  line=line, cex=cex, col=col, font=font)\n                            mtext(\"high\", side=side, at=1, adj=1,\n                                  line=line, cex=cex, col=col, font=font)\n                            return(list(labels=FALSE, tick=FALSE))\n                          })\n              }else\n              {\n                heatmap.2(hm_data[out.hclust$order,],rowsep = clust_order_num,sepcolor=\"black\",sepwidth = c(0.1,0.1),srtCol = 25,adjCol = c(0.6,0.8),cexCol = 0.7,col=whitered,dendrogram = \"none\",Rowv=FALSE,Colv=FALSE,adjRow = c(-500,-500),\n                          breaks=256,\n                          trace = \"none\",\n                          key.title=NA,\n                          key.xlab=NA,\n                          key.par=list(mgp=c(1.5, 0.5, 0),\n                                       mar=c(1, 2.5, 1, 0)),\n                          key.xtickfun=function() {\n                            cex <- par(\"cex\")*par(\"cex.axis\")\n                            side <- 1\n                            line <- 0\n                            col <- par(\"col.axis\")\n                            font <- par(\"font.axis\")\n                            mtext(\"low\", side=side, at=0, adj=0,\n                                  line=line, cex=cex, col=col, font=font)\n                            mtext(\"high\", side=side, at=1, adj=1,\n                                  line=line, cex=cex, col=col, font=font)\n                            return(list(labels=FALSE, tick=FALSE))\n                          })\n              }\n              #heatmap(as.matrix(clust_heatmap[,5:(5+all_wig_num-1)]),Rowv=NA,Colv=NA,cexCol = 1,labCol = \"\")\n              dev.off()\n\n            }\n          }\n\n          n_count=0\n          for (ii in 1:chrTotSize)\n          {\n            if(chrBedMatrix[ii]!=0)\n            {\n              n_count=n_count+1\n            }\n          }\n          random_group=matrix(data=0, nrow = groupNum, ncol = chrTotSize)\n          random_result=matrix(data=0, nrow = groupNum , ncol = 3)\n\n          for (ii in 1:groupNum)\n          {\n            tmp_site=sample(1:chrTotSize,size=n_count)\n            random_group[ii,tmp_site]= 2\n          }\n\n          tmpCmap=chrCmap\n          tmpCmap[lower.tri(tmpCmap)]=NA\n\n          for(t in 1:groupNum)\n          {\n\n            random_result[t,1]=0\n            random_result[t,2]=0\n            for(ii in 1:chrTotSize)\n            {\n              if(random_group[t,ii]>0)\n              {\n                b=which(tmpCmap[ii,]>0)\n                c=which((random_group[t,b])>0)\n                random_result[t,1]=random_result[t,1]+length(c)\n                random_result[t,2]=random_result[t,2]+length(b)\n              }\n            }\n\n          }\n\n          bed_count=0\n          all_count=0\n          bb_count=0\n          bb_info=NULL\n          bedTOall_info=NULL\n\n          for(ii in 1:chrTotSize)\n          {\n            if(chrBedMatrix[ii]>0)\n            {\n              b=which(tmpCmap[ii,]>0)\n              c=which((chrBedMatrix[b])>0)\n              if(length(b)>0)\n              {\n                bedTOall_info=rbind(bedTOall_info,cbind(ii,b,t(tmpCmap[ii,b])))\n              }\n              if(length(c)>0)\n              {\n                bb_info=rbind(bb_info,cbind(ii,b[c],t(tmpCmap[ii,b[c]])))\n              }\n              bb_count=bb_count+length(c)\n              bed_count=bed_count+length(b)\n            }\n          }\n\n          if_test=rbind(cbind(bb_info[,3],1),cbind(bedTOall_info[,3],2))\n          if_test=as.data.frame(if_test)\n          colnames(if_test)=c(\"if_value\",\"group\")\n          rownames(if_test)=c(1:(dim(if_test)[1]))\n          if_test$group=as.factor(if_test$group)\n          if_kruskal=kruskal.test(if_value~group, data=if_test)\n          if_kruskalmc=kruskalmc(if_value~group, data=if_test, probs=0.05)\n          mult <- oneway_test(if_value~group, data=if_test,\n                              ytrafo = function(data) trafo(data, numeric_trafo = rank),\n                              xtrafo = function(data) trafo(data, factor_trafo = function(x)\n                                model.matrix(~x - 1) %*% t(contrMat(table(x), \"Tukey\"))),\n                              teststat = \"max\", distribution = approximate(B = 90000))\n          if_pvalue=pvalue(mult, method = \"single-step\")\n          dif_result=t.test(random_result[,1],mu=bb_count)\n\n          write(\"\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"the statistic test of interaction frequency between b2b and b2o :\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"test name : Kruskal-Wallis rank sum test\",file=logfile,append=TRUE)\n          write(paste(\"Kruskal-Wallis chi-squared : \",if_kruskal$statistic,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"Kruskal-Wallis df : \",if_kruskal$parameter,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"Kruskal-Wallis p value : \",if_kruskal$p.value,sep = \"\"),file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"test name : Multiple comparison test after Kruskal-Wallis\",file=logfile,append=TRUE)\n          write(paste(\"significance level : \",if_kruskalmc$signif.level,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"observed difference  : \",if_kruskalmc$dif.com$obs.dif,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"critical difference  : \",if_kruskalmc$dif.com$critical.dif,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"exist difference  : \",if_kruskalmc$dif.com$difference,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"b2b frequency mean  : \",mean(bb_info[,3]),sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"b2o frequency mean  : \",mean(bedTOall_info[,3]),sep = \"\"),file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"the statistic test of interaction number between b2b and o2o :\",file=logfile,append=TRUE)\n          write(\"\",file=logfile,append=TRUE)\n          write(\"test name : t-test\",file=logfile,append=TRUE)\n          write(paste(\"numbers of random group : \",groupNum,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"95 percent confidence interval of random group : \",dif_result$conf.int[1],\" ~ \",dif_result$conf.int[2],sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"numbers of b2b : \",bb_count,sep = \"\"),file=logfile,append=TRUE)\n          write(paste(\"t test p value : \",dif_result$p.value,sep = \"\"),file=logfile,append=TRUE)\n          if(dif_result$p.value<0.05)\n          {\n            write(\"exist difference  : TRUE\",file=logfile,append=TRUE)\n          }else\n          {\n            write(\"exist difference  : FALSE\",file=logfile,append=TRUE)\n          }\n        }\n      }\n    }\n  }\n}\n",
    "created" : 1466598302453.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "499362412",
    "id" : "85E720ED",
    "lastKnownWriteTime" : 1468887775,
    "last_content_update" : 1468887775093,
    "path" : "G:/R/HBP_package/new/HBP/R/HBP.R",
    "project_path" : "R/HBP.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}